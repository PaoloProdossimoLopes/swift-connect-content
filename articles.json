{
  "version": "0.1.5",
  "articles": [
    {
      "id": 1,
      "thumbnailUrl": "https://example.com/thumb1.png",
      "title": "Async/Await no Swift",
      "description": "Entenda como simplificar chamadas assíncronas usando async/await e melhorar a legibilidade do seu código Swift.",
      "createdAt": "2025-03-10",
      "isVisible": true,
      "content": [
        {
          "id": 1,
          "type": "headline",
          "value": "Introdução ao Async/Await no Swift"
        },
        {
          "id": 2,
          "type": "body",
          "value": "Async/Await no Swift é essencial para desenvolvedores iOS modernos. Neste artigo, você vai dominar os principais conceitos, aplicações práticas e técnicas avançadas."
        },
        {
          "id": 3,
          "type": "headline",
          "value": "Conceitos fundamentais de Async/Await no Swift"
        },
        {
          "id": 4,
          "type": "body",
          "value": "Entenda os fundamentos do Async/Await no Swift, incluindo conceitos técnicos e suas aplicações no desenvolvimento iOS."
        },
        {
          "id": 5,
          "type": "headline",
          "value": "Exemplo básico de uso"
        },
        {
          "id": 6,
          "type": "body",
          "value": "Veja a seguir um exemplo básico para entender rapidamente a aplicação prática:"
        },
        {
          "id": 7,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo básico\ndef example() {\n    print(\"Hello, \\(topic[0])!\")\n}"
        },
        {
          "id": 8,
          "type": "headline",
          "value": "Exemplo intermediário com cenário real"
        },
        {
          "id": 9,
          "type": "body",
          "value": "Agora um exemplo mais completo, simulando um caso real para maior entendimento."
        },
        {
          "id": 10,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo intermediário\nclass Manager {\n    func performTask() {\n        // Implementação detalhada\n    }\n}"
        },
        {
          "id": 11,
          "type": "headline",
          "value": "Melhores práticas"
        },
        {
          "id": 12,
          "type": "body",
          "value": "Ao usar Async/Await no Swift, siga estas práticas:\n- Organização clara do código.\n- Aplicação de padrões de projeto.\n- Validação constante do desempenho."
        },
        {
          "id": 13,
          "type": "headline",
          "value": "Erros comuns e como evitá-los"
        },
        {
          "id": 14,
          "type": "body",
          "value": "Evite erros comuns como falta de tratamento de erros, negligência com performance e má gestão de memória."
        },
        {
          "id": 15,
          "type": "headline",
          "value": "Conclusão"
        },
        {
          "id": 16,
          "type": "body",
          "value": "Dominar Async/Await no Swift elevará suas capacidades técnicas e melhorará significativamente a qualidade dos seus apps iOS."
        }
      ]
    },
    {
      "id": 2,
      "thumbnailUrl": "https://example.com/thumb2.png",
      "title": "Combine no iOS",
      "description": "Aprenda a gerenciar fluxos de dados reativos utilizando Combine, com exemplos práticos de assinaturas e publishers.",
      "createdAt": "2025-02-13",
      "isVisible": true,
      "content": [
        {
          "id": 1,
          "type": "headline",
          "value": "Introdução ao Combine no iOS"
        },
        {
          "id": 2,
          "type": "body",
          "value": "Combine no iOS é essencial para desenvolvedores iOS modernos. Neste artigo, você vai dominar os principais conceitos, aplicações práticas e técnicas avançadas."
        },
        {
          "id": 3,
          "type": "headline",
          "value": "Conceitos fundamentais de Combine no iOS"
        },
        {
          "id": 4,
          "type": "body",
          "value": "Entenda os fundamentos do Combine no iOS, incluindo conceitos técnicos e suas aplicações no desenvolvimento iOS."
        },
        {
          "id": 5,
          "type": "headline",
          "value": "Exemplo básico de uso"
        },
        {
          "id": 6,
          "type": "body",
          "value": "Veja a seguir um exemplo básico para entender rapidamente a aplicação prática:"
        },
        {
          "id": 7,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo básico\ndef example() {\n    print(\"Hello, \\(topic[0])!\")\n}"
        },
        {
          "id": 8,
          "type": "headline",
          "value": "Exemplo intermediário com cenário real"
        },
        {
          "id": 9,
          "type": "body",
          "value": "Agora um exemplo mais completo, simulando um caso real para maior entendimento."
        },
        {
          "id": 10,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo intermediário\nclass Manager {\n    func performTask() {\n        // Implementação detalhada\n    }\n}"
        },
        {
          "id": 11,
          "type": "headline",
          "value": "Melhores práticas"
        },
        {
          "id": 12,
          "type": "body",
          "value": "Ao usar Combine no iOS, siga estas práticas:\n- Organização clara do código.\n- Aplicação de padrões de projeto.\n- Validação constante do desempenho."
        },
        {
          "id": 13,
          "type": "headline",
          "value": "Erros comuns e como evitá-los"
        },
        {
          "id": 14,
          "type": "body",
          "value": "Evite erros comuns como falta de tratamento de erros, negligência com performance e má gestão de memória."
        },
        {
          "id": 15,
          "type": "headline",
          "value": "Conclusão"
        },
        {
          "id": 16,
          "type": "body",
          "value": "Dominar Combine no iOS elevará suas capacidades técnicas e melhorará significativamente a qualidade dos seus apps iOS."
        }
      ]
    },
    {
      "id": 3,
      "thumbnailUrl": "https://example.com/thumb3.png",
      "title": "Testes Unitários com XCTest",
      "description": "Boas práticas e exemplos para implementar testes unitários robustos com XCTest em seus projetos Swift.",
      "createdAt": "2024-09-12",
      "isVisible": true,
      "content": [
        {
          "id": 1,
          "type": "headline",
          "value": "Introdução ao Testes Unitários com XCTest"
        },
        {
          "id": 2,
          "type": "body",
          "value": "Testes Unitários com XCTest é essencial para desenvolvedores iOS modernos. Neste artigo, você vai dominar os principais conceitos, aplicações práticas e técnicas avançadas."
        },
        {
          "id": 3,
          "type": "headline",
          "value": "Conceitos fundamentais de Testes Unitários com XCTest"
        },
        {
          "id": 4,
          "type": "body",
          "value": "Entenda os fundamentos do Testes Unitários com XCTest, incluindo conceitos técnicos e suas aplicações no desenvolvimento iOS."
        },
        {
          "id": 5,
          "type": "headline",
          "value": "Exemplo básico de uso"
        },
        {
          "id": 6,
          "type": "body",
          "value": "Veja a seguir um exemplo básico para entender rapidamente a aplicação prática:"
        },
        {
          "id": 7,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo básico\ndef example() {\n    print(\"Hello, \\(topic[0])!\")\n}"
        },
        {
          "id": 8,
          "type": "headline",
          "value": "Exemplo intermediário com cenário real"
        },
        {
          "id": 9,
          "type": "body",
          "value": "Agora um exemplo mais completo, simulando um caso real para maior entendimento."
        },
        {
          "id": 10,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo intermediário\nclass Manager {\n    func performTask() {\n        // Implementação detalhada\n    }\n}"
        },
        {
          "id": 11,
          "type": "headline",
          "value": "Melhores práticas"
        },
        {
          "id": 12,
          "type": "body",
          "value": "Ao usar Testes Unitários com XCTest, siga estas práticas:\n- Organização clara do código.\n- Aplicação de padrões de projeto.\n- Validação constante do desempenho."
        },
        {
          "id": 13,
          "type": "headline",
          "value": "Erros comuns e como evitá-los"
        },
        {
          "id": 14,
          "type": "body",
          "value": "Evite erros comuns como falta de tratamento de erros, negligência com performance e má gestão de memória."
        },
        {
          "id": 15,
          "type": "headline",
          "value": "Conclusão"
        },
        {
          "id": 16,
          "type": "body",
          "value": "Dominar Testes Unitários com XCTest elevará suas capacidades técnicas e melhorará significativamente a qualidade dos seus apps iOS."
        }
      ]
    },
    {
      "id": 4,
      "thumbnailUrl": "https://example.com/thumb4.png",
      "title": "Testes Unitários com XCTest",
      "description": "Boas práticas e exemplos para implementar testes unitários robustos com XCTest em seus projetos Swift.",
      "createdAt": "2024-10-01",
      "isVisible": true,
      "content": [
        {
          "id": 1,
          "type": "headline",
          "value": "Introdução ao Testes Unitários com XCTest"
        },
        {
          "id": 2,
          "type": "body",
          "value": "Testes Unitários com XCTest é essencial para desenvolvedores iOS modernos. Neste artigo, você vai dominar os principais conceitos, aplicações práticas e técnicas avançadas."
        },
        {
          "id": 3,
          "type": "headline",
          "value": "Conceitos fundamentais de Testes Unitários com XCTest"
        },
        {
          "id": 4,
          "type": "body",
          "value": "Entenda os fundamentos do Testes Unitários com XCTest, incluindo conceitos técnicos e suas aplicações no desenvolvimento iOS."
        },
        {
          "id": 5,
          "type": "headline",
          "value": "Exemplo básico de uso"
        },
        {
          "id": 6,
          "type": "body",
          "value": "Veja a seguir um exemplo básico para entender rapidamente a aplicação prática:"
        },
        {
          "id": 7,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo básico\ndef example() {\n    print(\"Hello, \\(topic[0])!\")\n}"
        },
        {
          "id": 8,
          "type": "headline",
          "value": "Exemplo intermediário com cenário real"
        },
        {
          "id": 9,
          "type": "body",
          "value": "Agora um exemplo mais completo, simulando um caso real para maior entendimento."
        },
        {
          "id": 10,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo intermediário\nclass Manager {\n    func performTask() {\n        // Implementação detalhada\n    }\n}"
        },
        {
          "id": 11,
          "type": "headline",
          "value": "Melhores práticas"
        },
        {
          "id": 12,
          "type": "body",
          "value": "Ao usar Testes Unitários com XCTest, siga estas práticas:\n- Organização clara do código.\n- Aplicação de padrões de projeto.\n- Validação constante do desempenho."
        },
        {
          "id": 13,
          "type": "headline",
          "value": "Erros comuns e como evitá-los"
        },
        {
          "id": 14,
          "type": "body",
          "value": "Evite erros comuns como falta de tratamento de erros, negligência com performance e má gestão de memória."
        },
        {
          "id": 15,
          "type": "headline",
          "value": "Conclusão"
        },
        {
          "id": 16,
          "type": "body",
          "value": "Dominar Testes Unitários com XCTest elevará suas capacidades técnicas e melhorará significativamente a qualidade dos seus apps iOS."
        }
      ]
    },
    {
      "id": 5,
      "thumbnailUrl": "https://example.com/thumb5.png",
      "title": "Melhorando performance com Instruments",
      "description": "Como utilizar o Instruments para identificar gargalos e otimizar performance em seus apps iOS.",
      "createdAt": "2024-06-09",
      "isVisible": true,
      "content": [
        {
          "id": 1,
          "type": "headline",
          "value": "Introdução ao Melhorando performance com Instruments"
        },
        {
          "id": 2,
          "type": "body",
          "value": "Melhorando performance com Instruments é essencial para desenvolvedores iOS modernos. Neste artigo, você vai dominar os principais conceitos, aplicações práticas e técnicas avançadas."
        },
        {
          "id": 3,
          "type": "headline",
          "value": "Conceitos fundamentais de Melhorando performance com Instruments"
        },
        {
          "id": 4,
          "type": "body",
          "value": "Entenda os fundamentos do Melhorando performance com Instruments, incluindo conceitos técnicos e suas aplicações no desenvolvimento iOS."
        },
        {
          "id": 5,
          "type": "headline",
          "value": "Exemplo básico de uso"
        },
        {
          "id": 6,
          "type": "body",
          "value": "Veja a seguir um exemplo básico para entender rapidamente a aplicação prática:"
        },
        {
          "id": 7,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo básico\ndef example() {\n    print(\"Hello, \\(topic[0])!\")\n}"
        },
        {
          "id": 8,
          "type": "headline",
          "value": "Exemplo intermediário com cenário real"
        },
        {
          "id": 9,
          "type": "body",
          "value": "Agora um exemplo mais completo, simulando um caso real para maior entendimento."
        },
        {
          "id": 10,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo intermediário\nclass Manager {\n    func performTask() {\n        // Implementação detalhada\n    }\n}"
        },
        {
          "id": 11,
          "type": "headline",
          "value": "Melhores práticas"
        },
        {
          "id": 12,
          "type": "body",
          "value": "Ao usar Melhorando performance com Instruments, siga estas práticas:\n- Organização clara do código.\n- Aplicação de padrões de projeto.\n- Validação constante do desempenho."
        },
        {
          "id": 13,
          "type": "headline",
          "value": "Erros comuns e como evitá-los"
        },
        {
          "id": 14,
          "type": "body",
          "value": "Evite erros comuns como falta de tratamento de erros, negligência com performance e má gestão de memória."
        },
        {
          "id": 15,
          "type": "headline",
          "value": "Conclusão"
        },
        {
          "id": 16,
          "type": "body",
          "value": "Dominar Melhorando performance com Instruments elevará suas capacidades técnicas e melhorará significativamente a qualidade dos seus apps iOS."
        }
      ]
    },
    {
      "id": 6,
      "thumbnailUrl": "https://example.com/thumb6.png",
      "title": "SwiftData para Persistência",
      "description": "Guia completo sobre SwiftData, a solução moderna para persistência em apps iOS, substituindo Core Data.",
      "createdAt": "2025-02-05",
      "isVisible": true,
      "content": [
        {
          "id": 1,
          "type": "headline",
          "value": "Introdução ao SwiftData para Persistência"
        },
        {
          "id": 2,
          "type": "body",
          "value": "SwiftData para Persistência é essencial para desenvolvedores iOS modernos. Neste artigo, você vai dominar os principais conceitos, aplicações práticas e técnicas avançadas."
        },
        {
          "id": 3,
          "type": "headline",
          "value": "Conceitos fundamentais de SwiftData para Persistência"
        },
        {
          "id": 4,
          "type": "body",
          "value": "Entenda os fundamentos do SwiftData para Persistência, incluindo conceitos técnicos e suas aplicações no desenvolvimento iOS."
        },
        {
          "id": 5,
          "type": "headline",
          "value": "Exemplo básico de uso"
        },
        {
          "id": 6,
          "type": "body",
          "value": "Veja a seguir um exemplo básico para entender rapidamente a aplicação prática:"
        },
        {
          "id": 7,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo básico\ndef example() {\n    print(\"Hello, \\(topic[0])!\")\n}"
        },
        {
          "id": 8,
          "type": "headline",
          "value": "Exemplo intermediário com cenário real"
        },
        {
          "id": 9,
          "type": "body",
          "value": "Agora um exemplo mais completo, simulando um caso real para maior entendimento."
        },
        {
          "id": 10,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo intermediário\nclass Manager {\n    func performTask() {\n        // Implementação detalhada\n    }\n}"
        },
        {
          "id": 11,
          "type": "headline",
          "value": "Melhores práticas"
        },
        {
          "id": 12,
          "type": "body",
          "value": "Ao usar SwiftData para Persistência, siga estas práticas:\n- Organização clara do código.\n- Aplicação de padrões de projeto.\n- Validação constante do desempenho."
        },
        {
          "id": 13,
          "type": "headline",
          "value": "Erros comuns e como evitá-los"
        },
        {
          "id": 14,
          "type": "body",
          "value": "Evite erros comuns como falta de tratamento de erros, negligência com performance e má gestão de memória."
        },
        {
          "id": 15,
          "type": "headline",
          "value": "Conclusão"
        },
        {
          "id": 16,
          "type": "body",
          "value": "Dominar SwiftData para Persistência elevará suas capacidades técnicas e melhorará significativamente a qualidade dos seus apps iOS."
        }
      ]
    },
    {
      "id": 7,
      "thumbnailUrl": "https://example.com/thumb7.png",
      "title": "SwiftData para Persistência",
      "description": "Guia completo sobre SwiftData, a solução moderna para persistência em apps iOS, substituindo Core Data.",
      "createdAt": "2025-03-09",
      "isVisible": true,
      "content": [
        {
          "id": 1,
          "type": "headline",
          "value": "Introdução ao SwiftData para Persistência"
        },
        {
          "id": 2,
          "type": "body",
          "value": "SwiftData para Persistência é essencial para desenvolvedores iOS modernos. Neste artigo, você vai dominar os principais conceitos, aplicações práticas e técnicas avançadas."
        },
        {
          "id": 3,
          "type": "headline",
          "value": "Conceitos fundamentais de SwiftData para Persistência"
        },
        {
          "id": 4,
          "type": "body",
          "value": "Entenda os fundamentos do SwiftData para Persistência, incluindo conceitos técnicos e suas aplicações no desenvolvimento iOS."
        },
        {
          "id": 5,
          "type": "headline",
          "value": "Exemplo básico de uso"
        },
        {
          "id": 6,
          "type": "body",
          "value": "Veja a seguir um exemplo básico para entender rapidamente a aplicação prática:"
        },
        {
          "id": 7,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo básico\ndef example() {\n    print(\"Hello, \\(topic[0])!\")\n}"
        },
        {
          "id": 8,
          "type": "headline",
          "value": "Exemplo intermediário com cenário real"
        },
        {
          "id": 9,
          "type": "body",
          "value": "Agora um exemplo mais completo, simulando um caso real para maior entendimento."
        },
        {
          "id": 10,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo intermediário\nclass Manager {\n    func performTask() {\n        // Implementação detalhada\n    }\n}"
        },
        {
          "id": 11,
          "type": "headline",
          "value": "Melhores práticas"
        },
        {
          "id": 12,
          "type": "body",
          "value": "Ao usar SwiftData para Persistência, siga estas práticas:\n- Organização clara do código.\n- Aplicação de padrões de projeto.\n- Validação constante do desempenho."
        },
        {
          "id": 13,
          "type": "headline",
          "value": "Erros comuns e como evitá-los"
        },
        {
          "id": 14,
          "type": "body",
          "value": "Evite erros comuns como falta de tratamento de erros, negligência com performance e má gestão de memória."
        },
        {
          "id": 15,
          "type": "headline",
          "value": "Conclusão"
        },
        {
          "id": 16,
          "type": "body",
          "value": "Dominar SwiftData para Persistência elevará suas capacidades técnicas e melhorará significativamente a qualidade dos seus apps iOS."
        }
      ]
    },
    {
      "id": 8,
      "thumbnailUrl": "https://example.com/thumb8.png",
      "title": "SwiftData para Persistência",
      "description": "Guia completo sobre SwiftData, a solução moderna para persistência em apps iOS, substituindo Core Data.",
      "createdAt": "2024-12-01",
      "isVisible": true,
      "content": [
        {
          "id": 1,
          "type": "headline",
          "value": "Introdução ao SwiftData para Persistência"
        },
        {
          "id": 2,
          "type": "body",
          "value": "SwiftData para Persistência é essencial para desenvolvedores iOS modernos. Neste artigo, você vai dominar os principais conceitos, aplicações práticas e técnicas avançadas."
        },
        {
          "id": 3,
          "type": "headline",
          "value": "Conceitos fundamentais de SwiftData para Persistência"
        },
        {
          "id": 4,
          "type": "body",
          "value": "Entenda os fundamentos do SwiftData para Persistência, incluindo conceitos técnicos e suas aplicações no desenvolvimento iOS."
        },
        {
          "id": 5,
          "type": "headline",
          "value": "Exemplo básico de uso"
        },
        {
          "id": 6,
          "type": "body",
          "value": "Veja a seguir um exemplo básico para entender rapidamente a aplicação prática:"
        },
        {
          "id": 7,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo básico\ndef example() {\n    print(\"Hello, \\(topic[0])!\")\n}"
        },
        {
          "id": 8,
          "type": "headline",
          "value": "Exemplo intermediário com cenário real"
        },
        {
          "id": 9,
          "type": "body",
          "value": "Agora um exemplo mais completo, simulando um caso real para maior entendimento."
        },
        {
          "id": 10,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo intermediário\nclass Manager {\n    func performTask() {\n        // Implementação detalhada\n    }\n}"
        },
        {
          "id": 11,
          "type": "headline",
          "value": "Melhores práticas"
        },
        {
          "id": 12,
          "type": "body",
          "value": "Ao usar SwiftData para Persistência, siga estas práticas:\n- Organização clara do código.\n- Aplicação de padrões de projeto.\n- Validação constante do desempenho."
        },
        {
          "id": 13,
          "type": "headline",
          "value": "Erros comuns e como evitá-los"
        },
        {
          "id": 14,
          "type": "body",
          "value": "Evite erros comuns como falta de tratamento de erros, negligência com performance e má gestão de memória."
        },
        {
          "id": 15,
          "type": "headline",
          "value": "Conclusão"
        },
        {
          "id": 16,
          "type": "body",
          "value": "Dominar SwiftData para Persistência elevará suas capacidades técnicas e melhorará significativamente a qualidade dos seus apps iOS."
        }
      ]
    },
    {
      "id": 9,
      "thumbnailUrl": "https://example.com/thumb9.png",
      "title": "Melhorando performance com Instruments",
      "description": "Como utilizar o Instruments para identificar gargalos e otimizar performance em seus apps iOS.",
      "createdAt": "2024-07-29",
      "isVisible": true,
      "content": [
        {
          "id": 1,
          "type": "headline",
          "value": "Introdução ao Melhorando performance com Instruments"
        },
        {
          "id": 2,
          "type": "body",
          "value": "Melhorando performance com Instruments é essencial para desenvolvedores iOS modernos. Neste artigo, você vai dominar os principais conceitos, aplicações práticas e técnicas avançadas."
        },
        {
          "id": 3,
          "type": "headline",
          "value": "Conceitos fundamentais de Melhorando performance com Instruments"
        },
        {
          "id": 4,
          "type": "body",
          "value": "Entenda os fundamentos do Melhorando performance com Instruments, incluindo conceitos técnicos e suas aplicações no desenvolvimento iOS."
        },
        {
          "id": 5,
          "type": "headline",
          "value": "Exemplo básico de uso"
        },
        {
          "id": 6,
          "type": "body",
          "value": "Veja a seguir um exemplo básico para entender rapidamente a aplicação prática:"
        },
        {
          "id": 7,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo básico\ndef example() {\n    print(\"Hello, \\(topic[0])!\")\n}"
        },
        {
          "id": 8,
          "type": "headline",
          "value": "Exemplo intermediário com cenário real"
        },
        {
          "id": 9,
          "type": "body",
          "value": "Agora um exemplo mais completo, simulando um caso real para maior entendimento."
        },
        {
          "id": 10,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo intermediário\nclass Manager {\n    func performTask() {\n        // Implementação detalhada\n    }\n}"
        },
        {
          "id": 11,
          "type": "headline",
          "value": "Melhores práticas"
        },
        {
          "id": 12,
          "type": "body",
          "value": "Ao usar Melhorando performance com Instruments, siga estas práticas:\n- Organização clara do código.\n- Aplicação de padrões de projeto.\n- Validação constante do desempenho."
        },
        {
          "id": 13,
          "type": "headline",
          "value": "Erros comuns e como evitá-los"
        },
        {
          "id": 14,
          "type": "body",
          "value": "Evite erros comuns como falta de tratamento de erros, negligência com performance e má gestão de memória."
        },
        {
          "id": 15,
          "type": "headline",
          "value": "Conclusão"
        },
        {
          "id": 16,
          "type": "body",
          "value": "Dominar Melhorando performance com Instruments elevará suas capacidades técnicas e melhorará significativamente a qualidade dos seus apps iOS."
        }
      ]
    },
    {
      "id": 10,
      "thumbnailUrl": "https://example.com/thumb10.png",
      "title": "Combine no iOS",
      "description": "Aprenda a gerenciar fluxos de dados reativos utilizando Combine, com exemplos práticos de assinaturas e publishers.",
      "createdAt": "2024-06-21",
      "isVisible": true,
      "content": [
        {
          "id": 1,
          "type": "headline",
          "value": "Introdução ao Combine no iOS"
        },
        {
          "id": 2,
          "type": "body",
          "value": "Combine no iOS é essencial para desenvolvedores iOS modernos. Neste artigo, você vai dominar os principais conceitos, aplicações práticas e técnicas avançadas."
        },
        {
          "id": 3,
          "type": "headline",
          "value": "Conceitos fundamentais de Combine no iOS"
        },
        {
          "id": 4,
          "type": "body",
          "value": "Entenda os fundamentos do Combine no iOS, incluindo conceitos técnicos e suas aplicações no desenvolvimento iOS."
        },
        {
          "id": 5,
          "type": "headline",
          "value": "Exemplo básico de uso"
        },
        {
          "id": 6,
          "type": "body",
          "value": "Veja a seguir um exemplo básico para entender rapidamente a aplicação prática:"
        },
        {
          "id": 7,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo básico\ndef example() {\n    print(\"Hello, \\(topic[0])!\")\n}"
        },
        {
          "id": 8,
          "type": "headline",
          "value": "Exemplo intermediário com cenário real"
        },
        {
          "id": 9,
          "type": "body",
          "value": "Agora um exemplo mais completo, simulando um caso real para maior entendimento."
        },
        {
          "id": 10,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo intermediário\nclass Manager {\n    func performTask() {\n        // Implementação detalhada\n    }\n}"
        },
        {
          "id": 11,
          "type": "headline",
          "value": "Melhores práticas"
        },
        {
          "id": 12,
          "type": "body",
          "value": "Ao usar Combine no iOS, siga estas práticas:\n- Organização clara do código.\n- Aplicação de padrões de projeto.\n- Validação constante do desempenho."
        },
        {
          "id": 13,
          "type": "headline",
          "value": "Erros comuns e como evitá-los"
        },
        {
          "id": 14,
          "type": "body",
          "value": "Evite erros comuns como falta de tratamento de erros, negligência com performance e má gestão de memória."
        },
        {
          "id": 15,
          "type": "headline",
          "value": "Conclusão"
        },
        {
          "id": 16,
          "type": "body",
          "value": "Dominar Combine no iOS elevará suas capacidades técnicas e melhorará significativamente a qualidade dos seus apps iOS."
        }
      ]
    },
    {
      "id": 11,
      "thumbnailUrl": "https://example.com/thumb11.png",
      "title": "Async/Await no Swift",
      "description": "Entenda como simplificar chamadas assíncronas usando async/await e melhorar a legibilidade do seu código Swift.",
      "createdAt": "2024-09-29",
      "isVisible": true,
      "content": [
        {
          "id": 1,
          "type": "headline",
          "value": "Introdução ao Async/Await no Swift"
        },
        {
          "id": 2,
          "type": "body",
          "value": "Async/Await no Swift é essencial para desenvolvedores iOS modernos. Neste artigo, você vai dominar os principais conceitos, aplicações práticas e técnicas avançadas."
        },
        {
          "id": 3,
          "type": "headline",
          "value": "Conceitos fundamentais de Async/Await no Swift"
        },
        {
          "id": 4,
          "type": "body",
          "value": "Entenda os fundamentos do Async/Await no Swift, incluindo conceitos técnicos e suas aplicações no desenvolvimento iOS."
        },
        {
          "id": 5,
          "type": "headline",
          "value": "Exemplo básico de uso"
        },
        {
          "id": 6,
          "type": "body",
          "value": "Veja a seguir um exemplo básico para entender rapidamente a aplicação prática:"
        },
        {
          "id": 7,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo básico\ndef example() {\n    print(\"Hello, \\(topic[0])!\")\n}"
        },
        {
          "id": 8,
          "type": "headline",
          "value": "Exemplo intermediário com cenário real"
        },
        {
          "id": 9,
          "type": "body",
          "value": "Agora um exemplo mais completo, simulando um caso real para maior entendimento."
        },
        {
          "id": 10,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo intermediário\nclass Manager {\n    func performTask() {\n        // Implementação detalhada\n    }\n}"
        },
        {
          "id": 11,
          "type": "headline",
          "value": "Melhores práticas"
        },
        {
          "id": 12,
          "type": "body",
          "value": "Ao usar Async/Await no Swift, siga estas práticas:\n- Organização clara do código.\n- Aplicação de padrões de projeto.\n- Validação constante do desempenho."
        },
        {
          "id": 13,
          "type": "headline",
          "value": "Erros comuns e como evitá-los"
        },
        {
          "id": 14,
          "type": "body",
          "value": "Evite erros comuns como falta de tratamento de erros, negligência com performance e má gestão de memória."
        },
        {
          "id": 15,
          "type": "headline",
          "value": "Conclusão"
        },
        {
          "id": 16,
          "type": "body",
          "value": "Dominar Async/Await no Swift elevará suas capacidades técnicas e melhorará significativamente a qualidade dos seus apps iOS."
        }
      ]
    },
    {
      "id": 12,
      "thumbnailUrl": "https://example.com/thumb12.png",
      "title": "Melhorando performance com Instruments",
      "description": "Como utilizar o Instruments para identificar gargalos e otimizar performance em seus apps iOS.",
      "createdAt": "2024-12-14",
      "isVisible": true,
      "content": [
        {
          "id": 1,
          "type": "headline",
          "value": "Introdução ao Melhorando performance com Instruments"
        },
        {
          "id": 2,
          "type": "body",
          "value": "Melhorando performance com Instruments é essencial para desenvolvedores iOS modernos. Neste artigo, você vai dominar os principais conceitos, aplicações práticas e técnicas avançadas."
        },
        {
          "id": 3,
          "type": "headline",
          "value": "Conceitos fundamentais de Melhorando performance com Instruments"
        },
        {
          "id": 4,
          "type": "body",
          "value": "Entenda os fundamentos do Melhorando performance com Instruments, incluindo conceitos técnicos e suas aplicações no desenvolvimento iOS."
        },
        {
          "id": 5,
          "type": "headline",
          "value": "Exemplo básico de uso"
        },
        {
          "id": 6,
          "type": "body",
          "value": "Veja a seguir um exemplo básico para entender rapidamente a aplicação prática:"
        },
        {
          "id": 7,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo básico\ndef example() {\n    print(\"Hello, \\(topic[0])!\")\n}"
        },
        {
          "id": 8,
          "type": "headline",
          "value": "Exemplo intermediário com cenário real"
        },
        {
          "id": 9,
          "type": "body",
          "value": "Agora um exemplo mais completo, simulando um caso real para maior entendimento."
        },
        {
          "id": 10,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo intermediário\nclass Manager {\n    func performTask() {\n        // Implementação detalhada\n    }\n}"
        },
        {
          "id": 11,
          "type": "headline",
          "value": "Melhores práticas"
        },
        {
          "id": 12,
          "type": "body",
          "value": "Ao usar Melhorando performance com Instruments, siga estas práticas:\n- Organização clara do código.\n- Aplicação de padrões de projeto.\n- Validação constante do desempenho."
        },
        {
          "id": 13,
          "type": "headline",
          "value": "Erros comuns e como evitá-los"
        },
        {
          "id": 14,
          "type": "body",
          "value": "Evite erros comuns como falta de tratamento de erros, negligência com performance e má gestão de memória."
        },
        {
          "id": 15,
          "type": "headline",
          "value": "Conclusão"
        },
        {
          "id": 16,
          "type": "body",
          "value": "Dominar Melhorando performance com Instruments elevará suas capacidades técnicas e melhorará significativamente a qualidade dos seus apps iOS."
        }
      ]
    },
    {
      "id": 13,
      "thumbnailUrl": "https://example.com/thumb13.png",
      "title": "SwiftData para Persistência",
      "description": "Guia completo sobre SwiftData, a solução moderna para persistência em apps iOS, substituindo Core Data.",
      "createdAt": "2024-04-13",
      "isVisible": true,
      "content": [
        {
          "id": 1,
          "type": "headline",
          "value": "Introdução ao SwiftData para Persistência"
        },
        {
          "id": 2,
          "type": "body",
          "value": "SwiftData para Persistência é essencial para desenvolvedores iOS modernos. Neste artigo, você vai dominar os principais conceitos, aplicações práticas e técnicas avançadas."
        },
        {
          "id": 3,
          "type": "headline",
          "value": "Conceitos fundamentais de SwiftData para Persistência"
        },
        {
          "id": 4,
          "type": "body",
          "value": "Entenda os fundamentos do SwiftData para Persistência, incluindo conceitos técnicos e suas aplicações no desenvolvimento iOS."
        },
        {
          "id": 5,
          "type": "headline",
          "value": "Exemplo básico de uso"
        },
        {
          "id": 6,
          "type": "body",
          "value": "Veja a seguir um exemplo básico para entender rapidamente a aplicação prática:"
        },
        {
          "id": 7,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo básico\ndef example() {\n    print(\"Hello, \\(topic[0])!\")\n}"
        },
        {
          "id": 8,
          "type": "headline",
          "value": "Exemplo intermediário com cenário real"
        },
        {
          "id": 9,
          "type": "body",
          "value": "Agora um exemplo mais completo, simulando um caso real para maior entendimento."
        },
        {
          "id": 10,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo intermediário\nclass Manager {\n    func performTask() {\n        // Implementação detalhada\n    }\n}"
        },
        {
          "id": 11,
          "type": "headline",
          "value": "Melhores práticas"
        },
        {
          "id": 12,
          "type": "body",
          "value": "Ao usar SwiftData para Persistência, siga estas práticas:\n- Organização clara do código.\n- Aplicação de padrões de projeto.\n- Validação constante do desempenho."
        },
        {
          "id": 13,
          "type": "headline",
          "value": "Erros comuns e como evitá-los"
        },
        {
          "id": 14,
          "type": "body",
          "value": "Evite erros comuns como falta de tratamento de erros, negligência com performance e má gestão de memória."
        },
        {
          "id": 15,
          "type": "headline",
          "value": "Conclusão"
        },
        {
          "id": 16,
          "type": "body",
          "value": "Dominar SwiftData para Persistência elevará suas capacidades técnicas e melhorará significativamente a qualidade dos seus apps iOS."
        }
      ]
    },
    {
      "id": 14,
      "thumbnailUrl": "https://example.com/thumb14.png",
      "title": "Combine no iOS",
      "description": "Aprenda a gerenciar fluxos de dados reativos utilizando Combine, com exemplos práticos de assinaturas e publishers.",
      "createdAt": "2024-09-10",
      "isVisible": true,
      "content": [
        {
          "id": 1,
          "type": "headline",
          "value": "Introdução ao Combine no iOS"
        },
        {
          "id": 2,
          "type": "body",
          "value": "Combine no iOS é essencial para desenvolvedores iOS modernos. Neste artigo, você vai dominar os principais conceitos, aplicações práticas e técnicas avançadas."
        },
        {
          "id": 3,
          "type": "headline",
          "value": "Conceitos fundamentais de Combine no iOS"
        },
        {
          "id": 4,
          "type": "body",
          "value": "Entenda os fundamentos do Combine no iOS, incluindo conceitos técnicos e suas aplicações no desenvolvimento iOS."
        },
        {
          "id": 5,
          "type": "headline",
          "value": "Exemplo básico de uso"
        },
        {
          "id": 6,
          "type": "body",
          "value": "Veja a seguir um exemplo básico para entender rapidamente a aplicação prática:"
        },
        {
          "id": 7,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo básico\ndef example() {\n    print(\"Hello, \\(topic[0])!\")\n}"
        },
        {
          "id": 8,
          "type": "headline",
          "value": "Exemplo intermediário com cenário real"
        },
        {
          "id": 9,
          "type": "body",
          "value": "Agora um exemplo mais completo, simulando um caso real para maior entendimento."
        },
        {
          "id": 10,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo intermediário\nclass Manager {\n    func performTask() {\n        // Implementação detalhada\n    }\n}"
        },
        {
          "id": 11,
          "type": "headline",
          "value": "Melhores práticas"
        },
        {
          "id": 12,
          "type": "body",
          "value": "Ao usar Combine no iOS, siga estas práticas:\n- Organização clara do código.\n- Aplicação de padrões de projeto.\n- Validação constante do desempenho."
        },
        {
          "id": 13,
          "type": "headline",
          "value": "Erros comuns e como evitá-los"
        },
        {
          "id": 14,
          "type": "body",
          "value": "Evite erros comuns como falta de tratamento de erros, negligência com performance e má gestão de memória."
        },
        {
          "id": 15,
          "type": "headline",
          "value": "Conclusão"
        },
        {
          "id": 16,
          "type": "body",
          "value": "Dominar Combine no iOS elevará suas capacidades técnicas e melhorará significativamente a qualidade dos seus apps iOS."
        }
      ]
    },
    {
      "id": 15,
      "thumbnailUrl": "https://example.com/thumb15.png",
      "title": "SwiftData para Persistência",
      "description": "Guia completo sobre SwiftData, a solução moderna para persistência em apps iOS, substituindo Core Data.",
      "createdAt": "2024-08-13",
      "isVisible": true,
      "content": [
        {
          "id": 1,
          "type": "headline",
          "value": "Introdução ao SwiftData para Persistência"
        },
        {
          "id": 2,
          "type": "body",
          "value": "SwiftData para Persistência é essencial para desenvolvedores iOS modernos. Neste artigo, você vai dominar os principais conceitos, aplicações práticas e técnicas avançadas."
        },
        {
          "id": 3,
          "type": "headline",
          "value": "Conceitos fundamentais de SwiftData para Persistência"
        },
        {
          "id": 4,
          "type": "body",
          "value": "Entenda os fundamentos do SwiftData para Persistência, incluindo conceitos técnicos e suas aplicações no desenvolvimento iOS."
        },
        {
          "id": 5,
          "type": "headline",
          "value": "Exemplo básico de uso"
        },
        {
          "id": 6,
          "type": "body",
          "value": "Veja a seguir um exemplo básico para entender rapidamente a aplicação prática:"
        },
        {
          "id": 7,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo básico\ndef example() {\n    print(\"Hello, \\(topic[0])!\")\n}"
        },
        {
          "id": 8,
          "type": "headline",
          "value": "Exemplo intermediário com cenário real"
        },
        {
          "id": 9,
          "type": "body",
          "value": "Agora um exemplo mais completo, simulando um caso real para maior entendimento."
        },
        {
          "id": 10,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo intermediário\nclass Manager {\n    func performTask() {\n        // Implementação detalhada\n    }\n}"
        },
        {
          "id": 11,
          "type": "headline",
          "value": "Melhores práticas"
        },
        {
          "id": 12,
          "type": "body",
          "value": "Ao usar SwiftData para Persistência, siga estas práticas:\n- Organização clara do código.\n- Aplicação de padrões de projeto.\n- Validação constante do desempenho."
        },
        {
          "id": 13,
          "type": "headline",
          "value": "Erros comuns e como evitá-los"
        },
        {
          "id": 14,
          "type": "body",
          "value": "Evite erros comuns como falta de tratamento de erros, negligência com performance e má gestão de memória."
        },
        {
          "id": 15,
          "type": "headline",
          "value": "Conclusão"
        },
        {
          "id": 16,
          "type": "body",
          "value": "Dominar SwiftData para Persistência elevará suas capacidades técnicas e melhorará significativamente a qualidade dos seus apps iOS."
        }
      ]
    },
    {
      "id": 16,
      "thumbnailUrl": "https://example.com/thumb16.png",
      "title": "Testes Unitários com XCTest",
      "description": "Boas práticas e exemplos para implementar testes unitários robustos com XCTest em seus projetos Swift.",
      "createdAt": "2024-08-29",
      "isVisible": true,
      "content": [
        {
          "id": 1,
          "type": "headline",
          "value": "Introdução ao Testes Unitários com XCTest"
        },
        {
          "id": 2,
          "type": "body",
          "value": "Testes Unitários com XCTest é essencial para desenvolvedores iOS modernos. Neste artigo, você vai dominar os principais conceitos, aplicações práticas e técnicas avançadas."
        },
        {
          "id": 3,
          "type": "headline",
          "value": "Conceitos fundamentais de Testes Unitários com XCTest"
        },
        {
          "id": 4,
          "type": "body",
          "value": "Entenda os fundamentos do Testes Unitários com XCTest, incluindo conceitos técnicos e suas aplicações no desenvolvimento iOS."
        },
        {
          "id": 5,
          "type": "headline",
          "value": "Exemplo básico de uso"
        },
        {
          "id": 6,
          "type": "body",
          "value": "Veja a seguir um exemplo básico para entender rapidamente a aplicação prática:"
        },
        {
          "id": 7,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo básico\ndef example() {\n    print(\"Hello, \\(topic[0])!\")\n}"
        },
        {
          "id": 8,
          "type": "headline",
          "value": "Exemplo intermediário com cenário real"
        },
        {
          "id": 9,
          "type": "body",
          "value": "Agora um exemplo mais completo, simulando um caso real para maior entendimento."
        },
        {
          "id": 10,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo intermediário\nclass Manager {\n    func performTask() {\n        // Implementação detalhada\n    }\n}"
        },
        {
          "id": 11,
          "type": "headline",
          "value": "Melhores práticas"
        },
        {
          "id": 12,
          "type": "body",
          "value": "Ao usar Testes Unitários com XCTest, siga estas práticas:\n- Organização clara do código.\n- Aplicação de padrões de projeto.\n- Validação constante do desempenho."
        },
        {
          "id": 13,
          "type": "headline",
          "value": "Erros comuns e como evitá-los"
        },
        {
          "id": 14,
          "type": "body",
          "value": "Evite erros comuns como falta de tratamento de erros, negligência com performance e má gestão de memória."
        },
        {
          "id": 15,
          "type": "headline",
          "value": "Conclusão"
        },
        {
          "id": 16,
          "type": "body",
          "value": "Dominar Testes Unitários com XCTest elevará suas capacidades técnicas e melhorará significativamente a qualidade dos seus apps iOS."
        }
      ]
    },
    {
      "id": 17,
      "thumbnailUrl": "https://example.com/thumb17.png",
      "title": "SwiftData para Persistência",
      "description": "Guia completo sobre SwiftData, a solução moderna para persistência em apps iOS, substituindo Core Data.",
      "createdAt": "2024-10-29",
      "isVisible": true,
      "content": [
        {
          "id": 1,
          "type": "headline",
          "value": "Introdução ao SwiftData para Persistência"
        },
        {
          "id": 2,
          "type": "body",
          "value": "SwiftData para Persistência é essencial para desenvolvedores iOS modernos. Neste artigo, você vai dominar os principais conceitos, aplicações práticas e técnicas avançadas."
        },
        {
          "id": 3,
          "type": "headline",
          "value": "Conceitos fundamentais de SwiftData para Persistência"
        },
        {
          "id": 4,
          "type": "body",
          "value": "Entenda os fundamentos do SwiftData para Persistência, incluindo conceitos técnicos e suas aplicações no desenvolvimento iOS."
        },
        {
          "id": 5,
          "type": "headline",
          "value": "Exemplo básico de uso"
        },
        {
          "id": 6,
          "type": "body",
          "value": "Veja a seguir um exemplo básico para entender rapidamente a aplicação prática:"
        },
        {
          "id": 7,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo básico\ndef example() {\n    print(\"Hello, \\(topic[0])!\")\n}"
        },
        {
          "id": 8,
          "type": "headline",
          "value": "Exemplo intermediário com cenário real"
        },
        {
          "id": 9,
          "type": "body",
          "value": "Agora um exemplo mais completo, simulando um caso real para maior entendimento."
        },
        {
          "id": 10,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo intermediário\nclass Manager {\n    func performTask() {\n        // Implementação detalhada\n    }\n}"
        },
        {
          "id": 11,
          "type": "headline",
          "value": "Melhores práticas"
        },
        {
          "id": 12,
          "type": "body",
          "value": "Ao usar SwiftData para Persistência, siga estas práticas:\n- Organização clara do código.\n- Aplicação de padrões de projeto.\n- Validação constante do desempenho."
        },
        {
          "id": 13,
          "type": "headline",
          "value": "Erros comuns e como evitá-los"
        },
        {
          "id": 14,
          "type": "body",
          "value": "Evite erros comuns como falta de tratamento de erros, negligência com performance e má gestão de memória."
        },
        {
          "id": 15,
          "type": "headline",
          "value": "Conclusão"
        },
        {
          "id": 16,
          "type": "body",
          "value": "Dominar SwiftData para Persistência elevará suas capacidades técnicas e melhorará significativamente a qualidade dos seus apps iOS."
        }
      ]
    },
    {
      "id": 18,
      "thumbnailUrl": "https://example.com/thumb18.png",
      "title": "SwiftData para Persistência",
      "description": "Guia completo sobre SwiftData, a solução moderna para persistência em apps iOS, substituindo Core Data.",
      "createdAt": "2024-10-09",
      "isVisible": true,
      "content": [
        {
          "id": 1,
          "type": "headline",
          "value": "Introdução ao SwiftData para Persistência"
        },
        {
          "id": 2,
          "type": "body",
          "value": "SwiftData para Persistência é essencial para desenvolvedores iOS modernos. Neste artigo, você vai dominar os principais conceitos, aplicações práticas e técnicas avançadas."
        },
        {
          "id": 3,
          "type": "headline",
          "value": "Conceitos fundamentais de SwiftData para Persistência"
        },
        {
          "id": 4,
          "type": "body",
          "value": "Entenda os fundamentos do SwiftData para Persistência, incluindo conceitos técnicos e suas aplicações no desenvolvimento iOS."
        },
        {
          "id": 5,
          "type": "headline",
          "value": "Exemplo básico de uso"
        },
        {
          "id": 6,
          "type": "body",
          "value": "Veja a seguir um exemplo básico para entender rapidamente a aplicação prática:"
        },
        {
          "id": 7,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo básico\ndef example() {\n    print(\"Hello, \\(topic[0])!\")\n}"
        },
        {
          "id": 8,
          "type": "headline",
          "value": "Exemplo intermediário com cenário real"
        },
        {
          "id": 9,
          "type": "body",
          "value": "Agora um exemplo mais completo, simulando um caso real para maior entendimento."
        },
        {
          "id": 10,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo intermediário\nclass Manager {\n    func performTask() {\n        // Implementação detalhada\n    }\n}"
        },
        {
          "id": 11,
          "type": "headline",
          "value": "Melhores práticas"
        },
        {
          "id": 12,
          "type": "body",
          "value": "Ao usar SwiftData para Persistência, siga estas práticas:\n- Organização clara do código.\n- Aplicação de padrões de projeto.\n- Validação constante do desempenho."
        },
        {
          "id": 13,
          "type": "headline",
          "value": "Erros comuns e como evitá-los"
        },
        {
          "id": 14,
          "type": "body",
          "value": "Evite erros comuns como falta de tratamento de erros, negligência com performance e má gestão de memória."
        },
        {
          "id": 15,
          "type": "headline",
          "value": "Conclusão"
        },
        {
          "id": 16,
          "type": "body",
          "value": "Dominar SwiftData para Persistência elevará suas capacidades técnicas e melhorará significativamente a qualidade dos seus apps iOS."
        }
      ]
    },
    {
      "id": 19,
      "thumbnailUrl": "https://example.com/thumb19.png",
      "title": "SwiftData para Persistência",
      "description": "Guia completo sobre SwiftData, a solução moderna para persistência em apps iOS, substituindo Core Data.",
      "createdAt": "2024-05-17",
      "isVisible": true,
      "content": [
        {
          "id": 1,
          "type": "headline",
          "value": "Introdução ao SwiftData para Persistência"
        },
        {
          "id": 2,
          "type": "body",
          "value": "SwiftData para Persistência é essencial para desenvolvedores iOS modernos. Neste artigo, você vai dominar os principais conceitos, aplicações práticas e técnicas avançadas."
        },
        {
          "id": 3,
          "type": "headline",
          "value": "Conceitos fundamentais de SwiftData para Persistência"
        },
        {
          "id": 4,
          "type": "body",
          "value": "Entenda os fundamentos do SwiftData para Persistência, incluindo conceitos técnicos e suas aplicações no desenvolvimento iOS."
        },
        {
          "id": 5,
          "type": "headline",
          "value": "Exemplo básico de uso"
        },
        {
          "id": 6,
          "type": "body",
          "value": "Veja a seguir um exemplo básico para entender rapidamente a aplicação prática:"
        },
        {
          "id": 7,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo básico\ndef example() {\n    print(\"Hello, \\(topic[0])!\")\n}"
        },
        {
          "id": 8,
          "type": "headline",
          "value": "Exemplo intermediário com cenário real"
        },
        {
          "id": 9,
          "type": "body",
          "value": "Agora um exemplo mais completo, simulando um caso real para maior entendimento."
        },
        {
          "id": 10,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo intermediário\nclass Manager {\n    func performTask() {\n        // Implementação detalhada\n    }\n}"
        },
        {
          "id": 11,
          "type": "headline",
          "value": "Melhores práticas"
        },
        {
          "id": 12,
          "type": "body",
          "value": "Ao usar SwiftData para Persistência, siga estas práticas:\n- Organização clara do código.\n- Aplicação de padrões de projeto.\n- Validação constante do desempenho."
        },
        {
          "id": 13,
          "type": "headline",
          "value": "Erros comuns e como evitá-los"
        },
        {
          "id": 14,
          "type": "body",
          "value": "Evite erros comuns como falta de tratamento de erros, negligência com performance e má gestão de memória."
        },
        {
          "id": 15,
          "type": "headline",
          "value": "Conclusão"
        },
        {
          "id": 16,
          "type": "body",
          "value": "Dominar SwiftData para Persistência elevará suas capacidades técnicas e melhorará significativamente a qualidade dos seus apps iOS."
        }
      ]
    },
    {
      "id": 20,
      "thumbnailUrl": "https://example.com/thumb20.png",
      "title": "Async/Await no Swift",
      "description": "Entenda como simplificar chamadas assíncronas usando async/await e melhorar a legibilidade do seu código Swift.",
      "createdAt": "2024-06-09",
      "isVisible": true,
      "content": [
        {
          "id": 1,
          "type": "headline",
          "value": "Introdução ao Async/Await no Swift"
        },
        {
          "id": 2,
          "type": "body",
          "value": "Async/Await no Swift é essencial para desenvolvedores iOS modernos. Neste artigo, você vai dominar os principais conceitos, aplicações práticas e técnicas avançadas."
        },
        {
          "id": 3,
          "type": "headline",
          "value": "Conceitos fundamentais de Async/Await no Swift"
        },
        {
          "id": 4,
          "type": "body",
          "value": "Entenda os fundamentos do Async/Await no Swift, incluindo conceitos técnicos e suas aplicações no desenvolvimento iOS."
        },
        {
          "id": 5,
          "type": "headline",
          "value": "Exemplo básico de uso"
        },
        {
          "id": 6,
          "type": "body",
          "value": "Veja a seguir um exemplo básico para entender rapidamente a aplicação prática:"
        },
        {
          "id": 7,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo básico\ndef example() {\n    print(\"Hello, \\(topic[0])!\")\n}"
        },
        {
          "id": 8,
          "type": "headline",
          "value": "Exemplo intermediário com cenário real"
        },
        {
          "id": 9,
          "type": "body",
          "value": "Agora um exemplo mais completo, simulando um caso real para maior entendimento."
        },
        {
          "id": 10,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo intermediário\nclass Manager {\n    func performTask() {\n        // Implementação detalhada\n    }\n}"
        },
        {
          "id": 11,
          "type": "headline",
          "value": "Melhores práticas"
        },
        {
          "id": 12,
          "type": "body",
          "value": "Ao usar Async/Await no Swift, siga estas práticas:\n- Organização clara do código.\n- Aplicação de padrões de projeto.\n- Validação constante do desempenho."
        },
        {
          "id": 13,
          "type": "headline",
          "value": "Erros comuns e como evitá-los"
        },
        {
          "id": 14,
          "type": "body",
          "value": "Evite erros comuns como falta de tratamento de erros, negligência com performance e má gestão de memória."
        },
        {
          "id": 15,
          "type": "headline",
          "value": "Conclusão"
        },
        {
          "id": 16,
          "type": "body",
          "value": "Dominar Async/Await no Swift elevará suas capacidades técnicas e melhorará significativamente a qualidade dos seus apps iOS."
        }
      ]
    },
    {
      "id": 21,
      "thumbnailUrl": "https://example.com/thumb21.png",
      "title": "Melhorando performance com Instruments",
      "description": "Como utilizar o Instruments para identificar gargalos e otimizar performance em seus apps iOS.",
      "createdAt": "2024-12-06",
      "isVisible": true,
      "content": [
        {
          "id": 1,
          "type": "headline",
          "value": "Introdução ao Melhorando performance com Instruments"
        },
        {
          "id": 2,
          "type": "body",
          "value": "Melhorando performance com Instruments é essencial para desenvolvedores iOS modernos. Neste artigo, você vai dominar os principais conceitos, aplicações práticas e técnicas avançadas."
        },
        {
          "id": 3,
          "type": "headline",
          "value": "Conceitos fundamentais de Melhorando performance com Instruments"
        },
        {
          "id": 4,
          "type": "body",
          "value": "Entenda os fundamentos do Melhorando performance com Instruments, incluindo conceitos técnicos e suas aplicações no desenvolvimento iOS."
        },
        {
          "id": 5,
          "type": "headline",
          "value": "Exemplo básico de uso"
        },
        {
          "id": 6,
          "type": "body",
          "value": "Veja a seguir um exemplo básico para entender rapidamente a aplicação prática:"
        },
        {
          "id": 7,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo básico\ndef example() {\n    print(\"Hello, \\(topic[0])!\")\n}"
        },
        {
          "id": 8,
          "type": "headline",
          "value": "Exemplo intermediário com cenário real"
        },
        {
          "id": 9,
          "type": "body",
          "value": "Agora um exemplo mais completo, simulando um caso real para maior entendimento."
        },
        {
          "id": 10,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo intermediário\nclass Manager {\n    func performTask() {\n        // Implementação detalhada\n    }\n}"
        },
        {
          "id": 11,
          "type": "headline",
          "value": "Melhores práticas"
        },
        {
          "id": 12,
          "type": "body",
          "value": "Ao usar Melhorando performance com Instruments, siga estas práticas:\n- Organização clara do código.\n- Aplicação de padrões de projeto.\n- Validação constante do desempenho."
        },
        {
          "id": 13,
          "type": "headline",
          "value": "Erros comuns e como evitá-los"
        },
        {
          "id": 14,
          "type": "body",
          "value": "Evite erros comuns como falta de tratamento de erros, negligência com performance e má gestão de memória."
        },
        {
          "id": 15,
          "type": "headline",
          "value": "Conclusão"
        },
        {
          "id": 16,
          "type": "body",
          "value": "Dominar Melhorando performance com Instruments elevará suas capacidades técnicas e melhorará significativamente a qualidade dos seus apps iOS."
        }
      ]
    },
    {
      "id": 22,
      "thumbnailUrl": "https://example.com/thumb22.png",
      "title": "Async/Await no Swift",
      "description": "Entenda como simplificar chamadas assíncronas usando async/await e melhorar a legibilidade do seu código Swift.",
      "createdAt": "2024-06-20",
      "isVisible": true,
      "content": [
        {
          "id": 1,
          "type": "headline",
          "value": "Introdução ao Async/Await no Swift"
        },
        {
          "id": 2,
          "type": "body",
          "value": "Async/Await no Swift é essencial para desenvolvedores iOS modernos. Neste artigo, você vai dominar os principais conceitos, aplicações práticas e técnicas avançadas."
        },
        {
          "id": 3,
          "type": "headline",
          "value": "Conceitos fundamentais de Async/Await no Swift"
        },
        {
          "id": 4,
          "type": "body",
          "value": "Entenda os fundamentos do Async/Await no Swift, incluindo conceitos técnicos e suas aplicações no desenvolvimento iOS."
        },
        {
          "id": 5,
          "type": "headline",
          "value": "Exemplo básico de uso"
        },
        {
          "id": 6,
          "type": "body",
          "value": "Veja a seguir um exemplo básico para entender rapidamente a aplicação prática:"
        },
        {
          "id": 7,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo básico\ndef example() {\n    print(\"Hello, \\(topic[0])!\")\n}"
        },
        {
          "id": 8,
          "type": "headline",
          "value": "Exemplo intermediário com cenário real"
        },
        {
          "id": 9,
          "type": "body",
          "value": "Agora um exemplo mais completo, simulando um caso real para maior entendimento."
        },
        {
          "id": 10,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo intermediário\nclass Manager {\n    func performTask() {\n        // Implementação detalhada\n    }\n}"
        },
        {
          "id": 11,
          "type": "headline",
          "value": "Melhores práticas"
        },
        {
          "id": 12,
          "type": "body",
          "value": "Ao usar Async/Await no Swift, siga estas práticas:\n- Organização clara do código.\n- Aplicação de padrões de projeto.\n- Validação constante do desempenho."
        },
        {
          "id": 13,
          "type": "headline",
          "value": "Erros comuns e como evitá-los"
        },
        {
          "id": 14,
          "type": "body",
          "value": "Evite erros comuns como falta de tratamento de erros, negligência com performance e má gestão de memória."
        },
        {
          "id": 15,
          "type": "headline",
          "value": "Conclusão"
        },
        {
          "id": 16,
          "type": "body",
          "value": "Dominar Async/Await no Swift elevará suas capacidades técnicas e melhorará significativamente a qualidade dos seus apps iOS."
        }
      ]
    },
    {
      "id": 23,
      "thumbnailUrl": "https://example.com/thumb23.png",
      "title": "SwiftData para Persistência",
      "description": "Guia completo sobre SwiftData, a solução moderna para persistência em apps iOS, substituindo Core Data.",
      "createdAt": "2024-10-07",
      "isVisible": true,
      "content": [
        {
          "id": 1,
          "type": "headline",
          "value": "Introdução ao SwiftData para Persistência"
        },
        {
          "id": 2,
          "type": "body",
          "value": "SwiftData para Persistência é essencial para desenvolvedores iOS modernos. Neste artigo, você vai dominar os principais conceitos, aplicações práticas e técnicas avançadas."
        },
        {
          "id": 3,
          "type": "headline",
          "value": "Conceitos fundamentais de SwiftData para Persistência"
        },
        {
          "id": 4,
          "type": "body",
          "value": "Entenda os fundamentos do SwiftData para Persistência, incluindo conceitos técnicos e suas aplicações no desenvolvimento iOS."
        },
        {
          "id": 5,
          "type": "headline",
          "value": "Exemplo básico de uso"
        },
        {
          "id": 6,
          "type": "body",
          "value": "Veja a seguir um exemplo básico para entender rapidamente a aplicação prática:"
        },
        {
          "id": 7,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo básico\ndef example() {\n    print(\"Hello, \\(topic[0])!\")\n}"
        },
        {
          "id": 8,
          "type": "headline",
          "value": "Exemplo intermediário com cenário real"
        },
        {
          "id": 9,
          "type": "body",
          "value": "Agora um exemplo mais completo, simulando um caso real para maior entendimento."
        },
        {
          "id": 10,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo intermediário\nclass Manager {\n    func performTask() {\n        // Implementação detalhada\n    }\n}"
        },
        {
          "id": 11,
          "type": "headline",
          "value": "Melhores práticas"
        },
        {
          "id": 12,
          "type": "body",
          "value": "Ao usar SwiftData para Persistência, siga estas práticas:\n- Organização clara do código.\n- Aplicação de padrões de projeto.\n- Validação constante do desempenho."
        },
        {
          "id": 13,
          "type": "headline",
          "value": "Erros comuns e como evitá-los"
        },
        {
          "id": 14,
          "type": "body",
          "value": "Evite erros comuns como falta de tratamento de erros, negligência com performance e má gestão de memória."
        },
        {
          "id": 15,
          "type": "headline",
          "value": "Conclusão"
        },
        {
          "id": 16,
          "type": "body",
          "value": "Dominar SwiftData para Persistência elevará suas capacidades técnicas e melhorará significativamente a qualidade dos seus apps iOS."
        }
      ]
    },
    {
      "id": 24,
      "thumbnailUrl": "https://example.com/thumb24.png",
      "title": "Combine no iOS",
      "description": "Aprenda a gerenciar fluxos de dados reativos utilizando Combine, com exemplos práticos de assinaturas e publishers.",
      "createdAt": "2024-08-03",
      "isVisible": true,
      "content": [
        {
          "id": 1,
          "type": "headline",
          "value": "Introdução ao Combine no iOS"
        },
        {
          "id": 2,
          "type": "body",
          "value": "Combine no iOS é essencial para desenvolvedores iOS modernos. Neste artigo, você vai dominar os principais conceitos, aplicações práticas e técnicas avançadas."
        },
        {
          "id": 3,
          "type": "headline",
          "value": "Conceitos fundamentais de Combine no iOS"
        },
        {
          "id": 4,
          "type": "body",
          "value": "Entenda os fundamentos do Combine no iOS, incluindo conceitos técnicos e suas aplicações no desenvolvimento iOS."
        },
        {
          "id": 5,
          "type": "headline",
          "value": "Exemplo básico de uso"
        },
        {
          "id": 6,
          "type": "body",
          "value": "Veja a seguir um exemplo básico para entender rapidamente a aplicação prática:"
        },
        {
          "id": 7,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo básico\ndef example() {\n    print(\"Hello, \\(topic[0])!\")\n}"
        },
        {
          "id": 8,
          "type": "headline",
          "value": "Exemplo intermediário com cenário real"
        },
        {
          "id": 9,
          "type": "body",
          "value": "Agora um exemplo mais completo, simulando um caso real para maior entendimento."
        },
        {
          "id": 10,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo intermediário\nclass Manager {\n    func performTask() {\n        // Implementação detalhada\n    }\n}"
        },
        {
          "id": 11,
          "type": "headline",
          "value": "Melhores práticas"
        },
        {
          "id": 12,
          "type": "body",
          "value": "Ao usar Combine no iOS, siga estas práticas:\n- Organização clara do código.\n- Aplicação de padrões de projeto.\n- Validação constante do desempenho."
        },
        {
          "id": 13,
          "type": "headline",
          "value": "Erros comuns e como evitá-los"
        },
        {
          "id": 14,
          "type": "body",
          "value": "Evite erros comuns como falta de tratamento de erros, negligência com performance e má gestão de memória."
        },
        {
          "id": 15,
          "type": "headline",
          "value": "Conclusão"
        },
        {
          "id": 16,
          "type": "body",
          "value": "Dominar Combine no iOS elevará suas capacidades técnicas e melhorará significativamente a qualidade dos seus apps iOS."
        }
      ]
    },
    {
      "id": 25,
      "thumbnailUrl": "https://example.com/thumb25.png",
      "title": "Testes Unitários com XCTest",
      "description": "Boas práticas e exemplos para implementar testes unitários robustos com XCTest em seus projetos Swift.",
      "createdAt": "2024-05-23",
      "isVisible": true,
      "content": [
        {
          "id": 1,
          "type": "headline",
          "value": "Introdução ao Testes Unitários com XCTest"
        },
        {
          "id": 2,
          "type": "body",
          "value": "Testes Unitários com XCTest é essencial para desenvolvedores iOS modernos. Neste artigo, você vai dominar os principais conceitos, aplicações práticas e técnicas avançadas."
        },
        {
          "id": 3,
          "type": "headline",
          "value": "Conceitos fundamentais de Testes Unitários com XCTest"
        },
        {
          "id": 4,
          "type": "body",
          "value": "Entenda os fundamentos do Testes Unitários com XCTest, incluindo conceitos técnicos e suas aplicações no desenvolvimento iOS."
        },
        {
          "id": 5,
          "type": "headline",
          "value": "Exemplo básico de uso"
        },
        {
          "id": 6,
          "type": "body",
          "value": "Veja a seguir um exemplo básico para entender rapidamente a aplicação prática:"
        },
        {
          "id": 7,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo básico\ndef example() {\n    print(\"Hello, \\(topic[0])!\")\n}"
        },
        {
          "id": 8,
          "type": "headline",
          "value": "Exemplo intermediário com cenário real"
        },
        {
          "id": 9,
          "type": "body",
          "value": "Agora um exemplo mais completo, simulando um caso real para maior entendimento."
        },
        {
          "id": 10,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo intermediário\nclass Manager {\n    func performTask() {\n        // Implementação detalhada\n    }\n}"
        },
        {
          "id": 11,
          "type": "headline",
          "value": "Melhores práticas"
        },
        {
          "id": 12,
          "type": "body",
          "value": "Ao usar Testes Unitários com XCTest, siga estas práticas:\n- Organização clara do código.\n- Aplicação de padrões de projeto.\n- Validação constante do desempenho."
        },
        {
          "id": 13,
          "type": "headline",
          "value": "Erros comuns e como evitá-los"
        },
        {
          "id": 14,
          "type": "body",
          "value": "Evite erros comuns como falta de tratamento de erros, negligência com performance e má gestão de memória."
        },
        {
          "id": 15,
          "type": "headline",
          "value": "Conclusão"
        },
        {
          "id": 16,
          "type": "body",
          "value": "Dominar Testes Unitários com XCTest elevará suas capacidades técnicas e melhorará significativamente a qualidade dos seus apps iOS."
        }
      ]
    },
    {
      "id": 26,
      "thumbnailUrl": "https://example.com/thumb26.png",
      "title": "Combine no iOS",
      "description": "Aprenda a gerenciar fluxos de dados reativos utilizando Combine, com exemplos práticos de assinaturas e publishers.",
      "createdAt": "2024-10-13",
      "isVisible": true,
      "content": [
        {
          "id": 1,
          "type": "headline",
          "value": "Introdução ao Combine no iOS"
        },
        {
          "id": 2,
          "type": "body",
          "value": "Combine no iOS é essencial para desenvolvedores iOS modernos. Neste artigo, você vai dominar os principais conceitos, aplicações práticas e técnicas avançadas."
        },
        {
          "id": 3,
          "type": "headline",
          "value": "Conceitos fundamentais de Combine no iOS"
        },
        {
          "id": 4,
          "type": "body",
          "value": "Entenda os fundamentos do Combine no iOS, incluindo conceitos técnicos e suas aplicações no desenvolvimento iOS."
        },
        {
          "id": 5,
          "type": "headline",
          "value": "Exemplo básico de uso"
        },
        {
          "id": 6,
          "type": "body",
          "value": "Veja a seguir um exemplo básico para entender rapidamente a aplicação prática:"
        },
        {
          "id": 7,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo básico\ndef example() {\n    print(\"Hello, \\(topic[0])!\")\n}"
        },
        {
          "id": 8,
          "type": "headline",
          "value": "Exemplo intermediário com cenário real"
        },
        {
          "id": 9,
          "type": "body",
          "value": "Agora um exemplo mais completo, simulando um caso real para maior entendimento."
        },
        {
          "id": 10,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo intermediário\nclass Manager {\n    func performTask() {\n        // Implementação detalhada\n    }\n}"
        },
        {
          "id": 11,
          "type": "headline",
          "value": "Melhores práticas"
        },
        {
          "id": 12,
          "type": "body",
          "value": "Ao usar Combine no iOS, siga estas práticas:\n- Organização clara do código.\n- Aplicação de padrões de projeto.\n- Validação constante do desempenho."
        },
        {
          "id": 13,
          "type": "headline",
          "value": "Erros comuns e como evitá-los"
        },
        {
          "id": 14,
          "type": "body",
          "value": "Evite erros comuns como falta de tratamento de erros, negligência com performance e má gestão de memória."
        },
        {
          "id": 15,
          "type": "headline",
          "value": "Conclusão"
        },
        {
          "id": 16,
          "type": "body",
          "value": "Dominar Combine no iOS elevará suas capacidades técnicas e melhorará significativamente a qualidade dos seus apps iOS."
        }
      ]
    },
    {
      "id": 27,
      "thumbnailUrl": "https://example.com/thumb27.png",
      "title": "Async/Await no Swift",
      "description": "Entenda como simplificar chamadas assíncronas usando async/await e melhorar a legibilidade do seu código Swift.",
      "createdAt": "2024-07-21",
      "isVisible": true,
      "content": [
        {
          "id": 1,
          "type": "headline",
          "value": "Introdução ao Async/Await no Swift"
        },
        {
          "id": 2,
          "type": "body",
          "value": "Async/Await no Swift é essencial para desenvolvedores iOS modernos. Neste artigo, você vai dominar os principais conceitos, aplicações práticas e técnicas avançadas."
        },
        {
          "id": 3,
          "type": "headline",
          "value": "Conceitos fundamentais de Async/Await no Swift"
        },
        {
          "id": 4,
          "type": "body",
          "value": "Entenda os fundamentos do Async/Await no Swift, incluindo conceitos técnicos e suas aplicações no desenvolvimento iOS."
        },
        {
          "id": 5,
          "type": "headline",
          "value": "Exemplo básico de uso"
        },
        {
          "id": 6,
          "type": "body",
          "value": "Veja a seguir um exemplo básico para entender rapidamente a aplicação prática:"
        },
        {
          "id": 7,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo básico\ndef example() {\n    print(\"Hello, \\(topic[0])!\")\n}"
        },
        {
          "id": 8,
          "type": "headline",
          "value": "Exemplo intermediário com cenário real"
        },
        {
          "id": 9,
          "type": "body",
          "value": "Agora um exemplo mais completo, simulando um caso real para maior entendimento."
        },
        {
          "id": 10,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo intermediário\nclass Manager {\n    func performTask() {\n        // Implementação detalhada\n    }\n}"
        },
        {
          "id": 11,
          "type": "headline",
          "value": "Melhores práticas"
        },
        {
          "id": 12,
          "type": "body",
          "value": "Ao usar Async/Await no Swift, siga estas práticas:\n- Organização clara do código.\n- Aplicação de padrões de projeto.\n- Validação constante do desempenho."
        },
        {
          "id": 13,
          "type": "headline",
          "value": "Erros comuns e como evitá-los"
        },
        {
          "id": 14,
          "type": "body",
          "value": "Evite erros comuns como falta de tratamento de erros, negligência com performance e má gestão de memória."
        },
        {
          "id": 15,
          "type": "headline",
          "value": "Conclusão"
        },
        {
          "id": 16,
          "type": "body",
          "value": "Dominar Async/Await no Swift elevará suas capacidades técnicas e melhorará significativamente a qualidade dos seus apps iOS."
        }
      ]
    },
    {
      "id": 28,
      "thumbnailUrl": "https://example.com/thumb28.png",
      "title": "Combine no iOS",
      "description": "Aprenda a gerenciar fluxos de dados reativos utilizando Combine, com exemplos práticos de assinaturas e publishers.",
      "createdAt": "2024-05-17",
      "isVisible": true,
      "content": [
        {
          "id": 1,
          "type": "headline",
          "value": "Introdução ao Combine no iOS"
        },
        {
          "id": 2,
          "type": "body",
          "value": "Combine no iOS é essencial para desenvolvedores iOS modernos. Neste artigo, você vai dominar os principais conceitos, aplicações práticas e técnicas avançadas."
        },
        {
          "id": 3,
          "type": "headline",
          "value": "Conceitos fundamentais de Combine no iOS"
        },
        {
          "id": 4,
          "type": "body",
          "value": "Entenda os fundamentos do Combine no iOS, incluindo conceitos técnicos e suas aplicações no desenvolvimento iOS."
        },
        {
          "id": 5,
          "type": "headline",
          "value": "Exemplo básico de uso"
        },
        {
          "id": 6,
          "type": "body",
          "value": "Veja a seguir um exemplo básico para entender rapidamente a aplicação prática:"
        },
        {
          "id": 7,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo básico\ndef example() {\n    print(\"Hello, \\(topic[0])!\")\n}"
        },
        {
          "id": 8,
          "type": "headline",
          "value": "Exemplo intermediário com cenário real"
        },
        {
          "id": 9,
          "type": "body",
          "value": "Agora um exemplo mais completo, simulando um caso real para maior entendimento."
        },
        {
          "id": 10,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo intermediário\nclass Manager {\n    func performTask() {\n        // Implementação detalhada\n    }\n}"
        },
        {
          "id": 11,
          "type": "headline",
          "value": "Melhores práticas"
        },
        {
          "id": 12,
          "type": "body",
          "value": "Ao usar Combine no iOS, siga estas práticas:\n- Organização clara do código.\n- Aplicação de padrões de projeto.\n- Validação constante do desempenho."
        },
        {
          "id": 13,
          "type": "headline",
          "value": "Erros comuns e como evitá-los"
        },
        {
          "id": 14,
          "type": "body",
          "value": "Evite erros comuns como falta de tratamento de erros, negligência com performance e má gestão de memória."
        },
        {
          "id": 15,
          "type": "headline",
          "value": "Conclusão"
        },
        {
          "id": 16,
          "type": "body",
          "value": "Dominar Combine no iOS elevará suas capacidades técnicas e melhorará significativamente a qualidade dos seus apps iOS."
        }
      ]
    },
    {
      "id": 29,
      "thumbnailUrl": "https://example.com/thumb29.png",
      "title": "SwiftData para Persistência",
      "description": "Guia completo sobre SwiftData, a solução moderna para persistência em apps iOS, substituindo Core Data.",
      "createdAt": "2024-08-07",
      "isVisible": true,
      "content": [
        {
          "id": 1,
          "type": "headline",
          "value": "Introdução ao SwiftData para Persistência"
        },
        {
          "id": 2,
          "type": "body",
          "value": "SwiftData para Persistência é essencial para desenvolvedores iOS modernos. Neste artigo, você vai dominar os principais conceitos, aplicações práticas e técnicas avançadas."
        },
        {
          "id": 3,
          "type": "headline",
          "value": "Conceitos fundamentais de SwiftData para Persistência"
        },
        {
          "id": 4,
          "type": "body",
          "value": "Entenda os fundamentos do SwiftData para Persistência, incluindo conceitos técnicos e suas aplicações no desenvolvimento iOS."
        },
        {
          "id": 5,
          "type": "headline",
          "value": "Exemplo básico de uso"
        },
        {
          "id": 6,
          "type": "body",
          "value": "Veja a seguir um exemplo básico para entender rapidamente a aplicação prática:"
        },
        {
          "id": 7,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo básico\ndef example() {\n    print(\"Hello, \\(topic[0])!\")\n}"
        },
        {
          "id": 8,
          "type": "headline",
          "value": "Exemplo intermediário com cenário real"
        },
        {
          "id": 9,
          "type": "body",
          "value": "Agora um exemplo mais completo, simulando um caso real para maior entendimento."
        },
        {
          "id": 10,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo intermediário\nclass Manager {\n    func performTask() {\n        // Implementação detalhada\n    }\n}"
        },
        {
          "id": 11,
          "type": "headline",
          "value": "Melhores práticas"
        },
        {
          "id": 12,
          "type": "body",
          "value": "Ao usar SwiftData para Persistência, siga estas práticas:\n- Organização clara do código.\n- Aplicação de padrões de projeto.\n- Validação constante do desempenho."
        },
        {
          "id": 13,
          "type": "headline",
          "value": "Erros comuns e como evitá-los"
        },
        {
          "id": 14,
          "type": "body",
          "value": "Evite erros comuns como falta de tratamento de erros, negligência com performance e má gestão de memória."
        },
        {
          "id": 15,
          "type": "headline",
          "value": "Conclusão"
        },
        {
          "id": 16,
          "type": "body",
          "value": "Dominar SwiftData para Persistência elevará suas capacidades técnicas e melhorará significativamente a qualidade dos seus apps iOS."
        }
      ]
    },
    {
      "id": 30,
      "thumbnailUrl": "https://example.com/thumb30.png",
      "title": "Testes Unitários com XCTest",
      "description": "Boas práticas e exemplos para implementar testes unitários robustos com XCTest em seus projetos Swift.",
      "createdAt": "2025-01-03",
      "isVisible": true,
      "content": [
        {
          "id": 1,
          "type": "headline",
          "value": "Introdução ao Testes Unitários com XCTest"
        },
        {
          "id": 2,
          "type": "body",
          "value": "Testes Unitários com XCTest é essencial para desenvolvedores iOS modernos. Neste artigo, você vai dominar os principais conceitos, aplicações práticas e técnicas avançadas."
        },
        {
          "id": 3,
          "type": "headline",
          "value": "Conceitos fundamentais de Testes Unitários com XCTest"
        },
        {
          "id": 4,
          "type": "body",
          "value": "Entenda os fundamentos do Testes Unitários com XCTest, incluindo conceitos técnicos e suas aplicações no desenvolvimento iOS."
        },
        {
          "id": 5,
          "type": "headline",
          "value": "Exemplo básico de uso"
        },
        {
          "id": 6,
          "type": "body",
          "value": "Veja a seguir um exemplo básico para entender rapidamente a aplicação prática:"
        },
        {
          "id": 7,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo básico\ndef example() {\n    print(\"Hello, \\(topic[0])!\")\n}"
        },
        {
          "id": 8,
          "type": "headline",
          "value": "Exemplo intermediário com cenário real"
        },
        {
          "id": 9,
          "type": "body",
          "value": "Agora um exemplo mais completo, simulando um caso real para maior entendimento."
        },
        {
          "id": 10,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo intermediário\nclass Manager {\n    func performTask() {\n        // Implementação detalhada\n    }\n}"
        },
        {
          "id": 11,
          "type": "headline",
          "value": "Melhores práticas"
        },
        {
          "id": 12,
          "type": "body",
          "value": "Ao usar Testes Unitários com XCTest, siga estas práticas:\n- Organização clara do código.\n- Aplicação de padrões de projeto.\n- Validação constante do desempenho."
        },
        {
          "id": 13,
          "type": "headline",
          "value": "Erros comuns e como evitá-los"
        },
        {
          "id": 14,
          "type": "body",
          "value": "Evite erros comuns como falta de tratamento de erros, negligência com performance e má gestão de memória."
        },
        {
          "id": 15,
          "type": "headline",
          "value": "Conclusão"
        },
        {
          "id": 16,
          "type": "body",
          "value": "Dominar Testes Unitários com XCTest elevará suas capacidades técnicas e melhorará significativamente a qualidade dos seus apps iOS."
        }
      ]
    },
    {
      "id": 31,
      "thumbnailUrl": "https://example.com/thumb31.png",
      "title": "Async/Await no Swift",
      "description": "Entenda como simplificar chamadas assíncronas usando async/await e melhorar a legibilidade do seu código Swift.",
      "createdAt": "2025-03-07",
      "isVisible": true,
      "content": [
        {
          "id": 1,
          "type": "headline",
          "value": "Introdução ao Async/Await no Swift"
        },
        {
          "id": 2,
          "type": "body",
          "value": "Async/Await no Swift é essencial para desenvolvedores iOS modernos. Neste artigo, você vai dominar os principais conceitos, aplicações práticas e técnicas avançadas."
        },
        {
          "id": 3,
          "type": "headline",
          "value": "Conceitos fundamentais de Async/Await no Swift"
        },
        {
          "id": 4,
          "type": "body",
          "value": "Entenda os fundamentos do Async/Await no Swift, incluindo conceitos técnicos e suas aplicações no desenvolvimento iOS."
        },
        {
          "id": 5,
          "type": "headline",
          "value": "Exemplo básico de uso"
        },
        {
          "id": 6,
          "type": "body",
          "value": "Veja a seguir um exemplo básico para entender rapidamente a aplicação prática:"
        },
        {
          "id": 7,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo básico\ndef example() {\n    print(\"Hello, \\(topic[0])!\")\n}"
        },
        {
          "id": 8,
          "type": "headline",
          "value": "Exemplo intermediário com cenário real"
        },
        {
          "id": 9,
          "type": "body",
          "value": "Agora um exemplo mais completo, simulando um caso real para maior entendimento."
        },
        {
          "id": 10,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo intermediário\nclass Manager {\n    func performTask() {\n        // Implementação detalhada\n    }\n}"
        },
        {
          "id": 11,
          "type": "headline",
          "value": "Melhores práticas"
        },
        {
          "id": 12,
          "type": "body",
          "value": "Ao usar Async/Await no Swift, siga estas práticas:\n- Organização clara do código.\n- Aplicação de padrões de projeto.\n- Validação constante do desempenho."
        },
        {
          "id": 13,
          "type": "headline",
          "value": "Erros comuns e como evitá-los"
        },
        {
          "id": 14,
          "type": "body",
          "value": "Evite erros comuns como falta de tratamento de erros, negligência com performance e má gestão de memória."
        },
        {
          "id": 15,
          "type": "headline",
          "value": "Conclusão"
        },
        {
          "id": 16,
          "type": "body",
          "value": "Dominar Async/Await no Swift elevará suas capacidades técnicas e melhorará significativamente a qualidade dos seus apps iOS."
        }
      ]
    },
    {
      "id": 32,
      "thumbnailUrl": "https://example.com/thumb32.png",
      "title": "Melhorando performance com Instruments",
      "description": "Como utilizar o Instruments para identificar gargalos e otimizar performance em seus apps iOS.",
      "createdAt": "2024-05-20",
      "isVisible": true,
      "content": [
        {
          "id": 1,
          "type": "headline",
          "value": "Introdução ao Melhorando performance com Instruments"
        },
        {
          "id": 2,
          "type": "body",
          "value": "Melhorando performance com Instruments é essencial para desenvolvedores iOS modernos. Neste artigo, você vai dominar os principais conceitos, aplicações práticas e técnicas avançadas."
        },
        {
          "id": 3,
          "type": "headline",
          "value": "Conceitos fundamentais de Melhorando performance com Instruments"
        },
        {
          "id": 4,
          "type": "body",
          "value": "Entenda os fundamentos do Melhorando performance com Instruments, incluindo conceitos técnicos e suas aplicações no desenvolvimento iOS."
        },
        {
          "id": 5,
          "type": "headline",
          "value": "Exemplo básico de uso"
        },
        {
          "id": 6,
          "type": "body",
          "value": "Veja a seguir um exemplo básico para entender rapidamente a aplicação prática:"
        },
        {
          "id": 7,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo básico\ndef example() {\n    print(\"Hello, \\(topic[0])!\")\n}"
        },
        {
          "id": 8,
          "type": "headline",
          "value": "Exemplo intermediário com cenário real"
        },
        {
          "id": 9,
          "type": "body",
          "value": "Agora um exemplo mais completo, simulando um caso real para maior entendimento."
        },
        {
          "id": 10,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo intermediário\nclass Manager {\n    func performTask() {\n        // Implementação detalhada\n    }\n}"
        },
        {
          "id": 11,
          "type": "headline",
          "value": "Melhores práticas"
        },
        {
          "id": 12,
          "type": "body",
          "value": "Ao usar Melhorando performance com Instruments, siga estas práticas:\n- Organização clara do código.\n- Aplicação de padrões de projeto.\n- Validação constante do desempenho."
        },
        {
          "id": 13,
          "type": "headline",
          "value": "Erros comuns e como evitá-los"
        },
        {
          "id": 14,
          "type": "body",
          "value": "Evite erros comuns como falta de tratamento de erros, negligência com performance e má gestão de memória."
        },
        {
          "id": 15,
          "type": "headline",
          "value": "Conclusão"
        },
        {
          "id": 16,
          "type": "body",
          "value": "Dominar Melhorando performance com Instruments elevará suas capacidades técnicas e melhorará significativamente a qualidade dos seus apps iOS."
        }
      ]
    },
    {
      "id": 33,
      "thumbnailUrl": "https://example.com/thumb33.png",
      "title": "Combine no iOS",
      "description": "Aprenda a gerenciar fluxos de dados reativos utilizando Combine, com exemplos práticos de assinaturas e publishers.",
      "createdAt": "2025-01-11",
      "isVisible": true,
      "content": [
        {
          "id": 1,
          "type": "headline",
          "value": "Introdução ao Combine no iOS"
        },
        {
          "id": 2,
          "type": "body",
          "value": "Combine no iOS é essencial para desenvolvedores iOS modernos. Neste artigo, você vai dominar os principais conceitos, aplicações práticas e técnicas avançadas."
        },
        {
          "id": 3,
          "type": "headline",
          "value": "Conceitos fundamentais de Combine no iOS"
        },
        {
          "id": 4,
          "type": "body",
          "value": "Entenda os fundamentos do Combine no iOS, incluindo conceitos técnicos e suas aplicações no desenvolvimento iOS."
        },
        {
          "id": 5,
          "type": "headline",
          "value": "Exemplo básico de uso"
        },
        {
          "id": 6,
          "type": "body",
          "value": "Veja a seguir um exemplo básico para entender rapidamente a aplicação prática:"
        },
        {
          "id": 7,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo básico\ndef example() {\n    print(\"Hello, \\(topic[0])!\")\n}"
        },
        {
          "id": 8,
          "type": "headline",
          "value": "Exemplo intermediário com cenário real"
        },
        {
          "id": 9,
          "type": "body",
          "value": "Agora um exemplo mais completo, simulando um caso real para maior entendimento."
        },
        {
          "id": 10,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo intermediário\nclass Manager {\n    func performTask() {\n        // Implementação detalhada\n    }\n}"
        },
        {
          "id": 11,
          "type": "headline",
          "value": "Melhores práticas"
        },
        {
          "id": 12,
          "type": "body",
          "value": "Ao usar Combine no iOS, siga estas práticas:\n- Organização clara do código.\n- Aplicação de padrões de projeto.\n- Validação constante do desempenho."
        },
        {
          "id": 13,
          "type": "headline",
          "value": "Erros comuns e como evitá-los"
        },
        {
          "id": 14,
          "type": "body",
          "value": "Evite erros comuns como falta de tratamento de erros, negligência com performance e má gestão de memória."
        },
        {
          "id": 15,
          "type": "headline",
          "value": "Conclusão"
        },
        {
          "id": 16,
          "type": "body",
          "value": "Dominar Combine no iOS elevará suas capacidades técnicas e melhorará significativamente a qualidade dos seus apps iOS."
        }
      ]
    },
    {
      "id": 34,
      "thumbnailUrl": "https://example.com/thumb34.png",
      "title": "Async/Await no Swift",
      "description": "Entenda como simplificar chamadas assíncronas usando async/await e melhorar a legibilidade do seu código Swift.",
      "createdAt": "2025-03-30",
      "isVisible": true,
      "content": [
        {
          "id": 1,
          "type": "headline",
          "value": "Introdução ao Async/Await no Swift"
        },
        {
          "id": 2,
          "type": "body",
          "value": "Async/Await no Swift é essencial para desenvolvedores iOS modernos. Neste artigo, você vai dominar os principais conceitos, aplicações práticas e técnicas avançadas."
        },
        {
          "id": 3,
          "type": "headline",
          "value": "Conceitos fundamentais de Async/Await no Swift"
        },
        {
          "id": 4,
          "type": "body",
          "value": "Entenda os fundamentos do Async/Await no Swift, incluindo conceitos técnicos e suas aplicações no desenvolvimento iOS."
        },
        {
          "id": 5,
          "type": "headline",
          "value": "Exemplo básico de uso"
        },
        {
          "id": 6,
          "type": "body",
          "value": "Veja a seguir um exemplo básico para entender rapidamente a aplicação prática:"
        },
        {
          "id": 7,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo básico\ndef example() {\n    print(\"Hello, \\(topic[0])!\")\n}"
        },
        {
          "id": 8,
          "type": "headline",
          "value": "Exemplo intermediário com cenário real"
        },
        {
          "id": 9,
          "type": "body",
          "value": "Agora um exemplo mais completo, simulando um caso real para maior entendimento."
        },
        {
          "id": 10,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo intermediário\nclass Manager {\n    func performTask() {\n        // Implementação detalhada\n    }\n}"
        },
        {
          "id": 11,
          "type": "headline",
          "value": "Melhores práticas"
        },
        {
          "id": 12,
          "type": "body",
          "value": "Ao usar Async/Await no Swift, siga estas práticas:\n- Organização clara do código.\n- Aplicação de padrões de projeto.\n- Validação constante do desempenho."
        },
        {
          "id": 13,
          "type": "headline",
          "value": "Erros comuns e como evitá-los"
        },
        {
          "id": 14,
          "type": "body",
          "value": "Evite erros comuns como falta de tratamento de erros, negligência com performance e má gestão de memória."
        },
        {
          "id": 15,
          "type": "headline",
          "value": "Conclusão"
        },
        {
          "id": 16,
          "type": "body",
          "value": "Dominar Async/Await no Swift elevará suas capacidades técnicas e melhorará significativamente a qualidade dos seus apps iOS."
        }
      ]
    },
    {
      "id": 35,
      "thumbnailUrl": "https://example.com/thumb35.png",
      "title": "Combine no iOS",
      "description": "Aprenda a gerenciar fluxos de dados reativos utilizando Combine, com exemplos práticos de assinaturas e publishers.",
      "createdAt": "2024-08-10",
      "isVisible": true,
      "content": [
        {
          "id": 1,
          "type": "headline",
          "value": "Introdução ao Combine no iOS"
        },
        {
          "id": 2,
          "type": "body",
          "value": "Combine no iOS é essencial para desenvolvedores iOS modernos. Neste artigo, você vai dominar os principais conceitos, aplicações práticas e técnicas avançadas."
        },
        {
          "id": 3,
          "type": "headline",
          "value": "Conceitos fundamentais de Combine no iOS"
        },
        {
          "id": 4,
          "type": "body",
          "value": "Entenda os fundamentos do Combine no iOS, incluindo conceitos técnicos e suas aplicações no desenvolvimento iOS."
        },
        {
          "id": 5,
          "type": "headline",
          "value": "Exemplo básico de uso"
        },
        {
          "id": 6,
          "type": "body",
          "value": "Veja a seguir um exemplo básico para entender rapidamente a aplicação prática:"
        },
        {
          "id": 7,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo básico\ndef example() {\n    print(\"Hello, \\(topic[0])!\")\n}"
        },
        {
          "id": 8,
          "type": "headline",
          "value": "Exemplo intermediário com cenário real"
        },
        {
          "id": 9,
          "type": "body",
          "value": "Agora um exemplo mais completo, simulando um caso real para maior entendimento."
        },
        {
          "id": 10,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo intermediário\nclass Manager {\n    func performTask() {\n        // Implementação detalhada\n    }\n}"
        },
        {
          "id": 11,
          "type": "headline",
          "value": "Melhores práticas"
        },
        {
          "id": 12,
          "type": "body",
          "value": "Ao usar Combine no iOS, siga estas práticas:\n- Organização clara do código.\n- Aplicação de padrões de projeto.\n- Validação constante do desempenho."
        },
        {
          "id": 13,
          "type": "headline",
          "value": "Erros comuns e como evitá-los"
        },
        {
          "id": 14,
          "type": "body",
          "value": "Evite erros comuns como falta de tratamento de erros, negligência com performance e má gestão de memória."
        },
        {
          "id": 15,
          "type": "headline",
          "value": "Conclusão"
        },
        {
          "id": 16,
          "type": "body",
          "value": "Dominar Combine no iOS elevará suas capacidades técnicas e melhorará significativamente a qualidade dos seus apps iOS."
        }
      ]
    },
    {
      "id": 36,
      "thumbnailUrl": "https://example.com/thumb36.png",
      "title": "Async/Await no Swift",
      "description": "Entenda como simplificar chamadas assíncronas usando async/await e melhorar a legibilidade do seu código Swift.",
      "createdAt": "2024-11-04",
      "isVisible": true,
      "content": [
        {
          "id": 1,
          "type": "headline",
          "value": "Introdução ao Async/Await no Swift"
        },
        {
          "id": 2,
          "type": "body",
          "value": "Async/Await no Swift é essencial para desenvolvedores iOS modernos. Neste artigo, você vai dominar os principais conceitos, aplicações práticas e técnicas avançadas."
        },
        {
          "id": 3,
          "type": "headline",
          "value": "Conceitos fundamentais de Async/Await no Swift"
        },
        {
          "id": 4,
          "type": "body",
          "value": "Entenda os fundamentos do Async/Await no Swift, incluindo conceitos técnicos e suas aplicações no desenvolvimento iOS."
        },
        {
          "id": 5,
          "type": "headline",
          "value": "Exemplo básico de uso"
        },
        {
          "id": 6,
          "type": "body",
          "value": "Veja a seguir um exemplo básico para entender rapidamente a aplicação prática:"
        },
        {
          "id": 7,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo básico\ndef example() {\n    print(\"Hello, \\(topic[0])!\")\n}"
        },
        {
          "id": 8,
          "type": "headline",
          "value": "Exemplo intermediário com cenário real"
        },
        {
          "id": 9,
          "type": "body",
          "value": "Agora um exemplo mais completo, simulando um caso real para maior entendimento."
        },
        {
          "id": 10,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo intermediário\nclass Manager {\n    func performTask() {\n        // Implementação detalhada\n    }\n}"
        },
        {
          "id": 11,
          "type": "headline",
          "value": "Melhores práticas"
        },
        {
          "id": 12,
          "type": "body",
          "value": "Ao usar Async/Await no Swift, siga estas práticas:\n- Organização clara do código.\n- Aplicação de padrões de projeto.\n- Validação constante do desempenho."
        },
        {
          "id": 13,
          "type": "headline",
          "value": "Erros comuns e como evitá-los"
        },
        {
          "id": 14,
          "type": "body",
          "value": "Evite erros comuns como falta de tratamento de erros, negligência com performance e má gestão de memória."
        },
        {
          "id": 15,
          "type": "headline",
          "value": "Conclusão"
        },
        {
          "id": 16,
          "type": "body",
          "value": "Dominar Async/Await no Swift elevará suas capacidades técnicas e melhorará significativamente a qualidade dos seus apps iOS."
        }
      ]
    },
    {
      "id": 37,
      "thumbnailUrl": "https://example.com/thumb37.png",
      "title": "Combine no iOS",
      "description": "Aprenda a gerenciar fluxos de dados reativos utilizando Combine, com exemplos práticos de assinaturas e publishers.",
      "createdAt": "2025-03-27",
      "isVisible": true,
      "content": [
        {
          "id": 1,
          "type": "headline",
          "value": "Introdução ao Combine no iOS"
        },
        {
          "id": 2,
          "type": "body",
          "value": "Combine no iOS é essencial para desenvolvedores iOS modernos. Neste artigo, você vai dominar os principais conceitos, aplicações práticas e técnicas avançadas."
        },
        {
          "id": 3,
          "type": "headline",
          "value": "Conceitos fundamentais de Combine no iOS"
        },
        {
          "id": 4,
          "type": "body",
          "value": "Entenda os fundamentos do Combine no iOS, incluindo conceitos técnicos e suas aplicações no desenvolvimento iOS."
        },
        {
          "id": 5,
          "type": "headline",
          "value": "Exemplo básico de uso"
        },
        {
          "id": 6,
          "type": "body",
          "value": "Veja a seguir um exemplo básico para entender rapidamente a aplicação prática:"
        },
        {
          "id": 7,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo básico\ndef example() {\n    print(\"Hello, \\(topic[0])!\")\n}"
        },
        {
          "id": 8,
          "type": "headline",
          "value": "Exemplo intermediário com cenário real"
        },
        {
          "id": 9,
          "type": "body",
          "value": "Agora um exemplo mais completo, simulando um caso real para maior entendimento."
        },
        {
          "id": 10,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo intermediário\nclass Manager {\n    func performTask() {\n        // Implementação detalhada\n    }\n}"
        },
        {
          "id": 11,
          "type": "headline",
          "value": "Melhores práticas"
        },
        {
          "id": 12,
          "type": "body",
          "value": "Ao usar Combine no iOS, siga estas práticas:\n- Organização clara do código.\n- Aplicação de padrões de projeto.\n- Validação constante do desempenho."
        },
        {
          "id": 13,
          "type": "headline",
          "value": "Erros comuns e como evitá-los"
        },
        {
          "id": 14,
          "type": "body",
          "value": "Evite erros comuns como falta de tratamento de erros, negligência com performance e má gestão de memória."
        },
        {
          "id": 15,
          "type": "headline",
          "value": "Conclusão"
        },
        {
          "id": 16,
          "type": "body",
          "value": "Dominar Combine no iOS elevará suas capacidades técnicas e melhorará significativamente a qualidade dos seus apps iOS."
        }
      ]
    },
    {
      "id": 38,
      "thumbnailUrl": "https://example.com/thumb38.png",
      "title": "Testes Unitários com XCTest",
      "description": "Boas práticas e exemplos para implementar testes unitários robustos com XCTest em seus projetos Swift.",
      "createdAt": "2024-11-28",
      "isVisible": true,
      "content": [
        {
          "id": 1,
          "type": "headline",
          "value": "Introdução ao Testes Unitários com XCTest"
        },
        {
          "id": 2,
          "type": "body",
          "value": "Testes Unitários com XCTest é essencial para desenvolvedores iOS modernos. Neste artigo, você vai dominar os principais conceitos, aplicações práticas e técnicas avançadas."
        },
        {
          "id": 3,
          "type": "headline",
          "value": "Conceitos fundamentais de Testes Unitários com XCTest"
        },
        {
          "id": 4,
          "type": "body",
          "value": "Entenda os fundamentos do Testes Unitários com XCTest, incluindo conceitos técnicos e suas aplicações no desenvolvimento iOS."
        },
        {
          "id": 5,
          "type": "headline",
          "value": "Exemplo básico de uso"
        },
        {
          "id": 6,
          "type": "body",
          "value": "Veja a seguir um exemplo básico para entender rapidamente a aplicação prática:"
        },
        {
          "id": 7,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo básico\ndef example() {\n    print(\"Hello, \\(topic[0])!\")\n}"
        },
        {
          "id": 8,
          "type": "headline",
          "value": "Exemplo intermediário com cenário real"
        },
        {
          "id": 9,
          "type": "body",
          "value": "Agora um exemplo mais completo, simulando um caso real para maior entendimento."
        },
        {
          "id": 10,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo intermediário\nclass Manager {\n    func performTask() {\n        // Implementação detalhada\n    }\n}"
        },
        {
          "id": 11,
          "type": "headline",
          "value": "Melhores práticas"
        },
        {
          "id": 12,
          "type": "body",
          "value": "Ao usar Testes Unitários com XCTest, siga estas práticas:\n- Organização clara do código.\n- Aplicação de padrões de projeto.\n- Validação constante do desempenho."
        },
        {
          "id": 13,
          "type": "headline",
          "value": "Erros comuns e como evitá-los"
        },
        {
          "id": 14,
          "type": "body",
          "value": "Evite erros comuns como falta de tratamento de erros, negligência com performance e má gestão de memória."
        },
        {
          "id": 15,
          "type": "headline",
          "value": "Conclusão"
        },
        {
          "id": 16,
          "type": "body",
          "value": "Dominar Testes Unitários com XCTest elevará suas capacidades técnicas e melhorará significativamente a qualidade dos seus apps iOS."
        }
      ]
    },
    {
      "id": 39,
      "thumbnailUrl": "https://example.com/thumb39.png",
      "title": "Testes Unitários com XCTest",
      "description": "Boas práticas e exemplos para implementar testes unitários robustos com XCTest em seus projetos Swift.",
      "createdAt": "2024-07-06",
      "isVisible": true,
      "content": [
        {
          "id": 1,
          "type": "headline",
          "value": "Introdução ao Testes Unitários com XCTest"
        },
        {
          "id": 2,
          "type": "body",
          "value": "Testes Unitários com XCTest é essencial para desenvolvedores iOS modernos. Neste artigo, você vai dominar os principais conceitos, aplicações práticas e técnicas avançadas."
        },
        {
          "id": 3,
          "type": "headline",
          "value": "Conceitos fundamentais de Testes Unitários com XCTest"
        },
        {
          "id": 4,
          "type": "body",
          "value": "Entenda os fundamentos do Testes Unitários com XCTest, incluindo conceitos técnicos e suas aplicações no desenvolvimento iOS."
        },
        {
          "id": 5,
          "type": "headline",
          "value": "Exemplo básico de uso"
        },
        {
          "id": 6,
          "type": "body",
          "value": "Veja a seguir um exemplo básico para entender rapidamente a aplicação prática:"
        },
        {
          "id": 7,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo básico\ndef example() {\n    print(\"Hello, \\(topic[0])!\")\n}"
        },
        {
          "id": 8,
          "type": "headline",
          "value": "Exemplo intermediário com cenário real"
        },
        {
          "id": 9,
          "type": "body",
          "value": "Agora um exemplo mais completo, simulando um caso real para maior entendimento."
        },
        {
          "id": 10,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo intermediário\nclass Manager {\n    func performTask() {\n        // Implementação detalhada\n    }\n}"
        },
        {
          "id": 11,
          "type": "headline",
          "value": "Melhores práticas"
        },
        {
          "id": 12,
          "type": "body",
          "value": "Ao usar Testes Unitários com XCTest, siga estas práticas:\n- Organização clara do código.\n- Aplicação de padrões de projeto.\n- Validação constante do desempenho."
        },
        {
          "id": 13,
          "type": "headline",
          "value": "Erros comuns e como evitá-los"
        },
        {
          "id": 14,
          "type": "body",
          "value": "Evite erros comuns como falta de tratamento de erros, negligência com performance e má gestão de memória."
        },
        {
          "id": 15,
          "type": "headline",
          "value": "Conclusão"
        },
        {
          "id": 16,
          "type": "body",
          "value": "Dominar Testes Unitários com XCTest elevará suas capacidades técnicas e melhorará significativamente a qualidade dos seus apps iOS."
        }
      ]
    },
    {
      "id": 40,
      "thumbnailUrl": "https://example.com/thumb40.png",
      "title": "Melhorando performance com Instruments",
      "description": "Como utilizar o Instruments para identificar gargalos e otimizar performance em seus apps iOS.",
      "createdAt": "2024-06-08",
      "isVisible": true,
      "content": [
        {
          "id": 1,
          "type": "headline",
          "value": "Introdução ao Melhorando performance com Instruments"
        },
        {
          "id": 2,
          "type": "body",
          "value": "Melhorando performance com Instruments é essencial para desenvolvedores iOS modernos. Neste artigo, você vai dominar os principais conceitos, aplicações práticas e técnicas avançadas."
        },
        {
          "id": 3,
          "type": "headline",
          "value": "Conceitos fundamentais de Melhorando performance com Instruments"
        },
        {
          "id": 4,
          "type": "body",
          "value": "Entenda os fundamentos do Melhorando performance com Instruments, incluindo conceitos técnicos e suas aplicações no desenvolvimento iOS."
        },
        {
          "id": 5,
          "type": "headline",
          "value": "Exemplo básico de uso"
        },
        {
          "id": 6,
          "type": "body",
          "value": "Veja a seguir um exemplo básico para entender rapidamente a aplicação prática:"
        },
        {
          "id": 7,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo básico\ndef example() {\n    print(\"Hello, \\(topic[0])!\")\n}"
        },
        {
          "id": 8,
          "type": "headline",
          "value": "Exemplo intermediário com cenário real"
        },
        {
          "id": 9,
          "type": "body",
          "value": "Agora um exemplo mais completo, simulando um caso real para maior entendimento."
        },
        {
          "id": 10,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo intermediário\nclass Manager {\n    func performTask() {\n        // Implementação detalhada\n    }\n}"
        },
        {
          "id": 11,
          "type": "headline",
          "value": "Melhores práticas"
        },
        {
          "id": 12,
          "type": "body",
          "value": "Ao usar Melhorando performance com Instruments, siga estas práticas:\n- Organização clara do código.\n- Aplicação de padrões de projeto.\n- Validação constante do desempenho."
        },
        {
          "id": 13,
          "type": "headline",
          "value": "Erros comuns e como evitá-los"
        },
        {
          "id": 14,
          "type": "body",
          "value": "Evite erros comuns como falta de tratamento de erros, negligência com performance e má gestão de memória."
        },
        {
          "id": 15,
          "type": "headline",
          "value": "Conclusão"
        },
        {
          "id": 16,
          "type": "body",
          "value": "Dominar Melhorando performance com Instruments elevará suas capacidades técnicas e melhorará significativamente a qualidade dos seus apps iOS."
        }
      ]
    },
    {
      "id": 41,
      "thumbnailUrl": "https://example.com/thumb41.png",
      "title": "Melhorando performance com Instruments",
      "description": "Como utilizar o Instruments para identificar gargalos e otimizar performance em seus apps iOS.",
      "createdAt": "2024-12-19",
      "isVisible": true,
      "content": [
        {
          "id": 1,
          "type": "headline",
          "value": "Introdução ao Melhorando performance com Instruments"
        },
        {
          "id": 2,
          "type": "body",
          "value": "Melhorando performance com Instruments é essencial para desenvolvedores iOS modernos. Neste artigo, você vai dominar os principais conceitos, aplicações práticas e técnicas avançadas."
        },
        {
          "id": 3,
          "type": "headline",
          "value": "Conceitos fundamentais de Melhorando performance com Instruments"
        },
        {
          "id": 4,
          "type": "body",
          "value": "Entenda os fundamentos do Melhorando performance com Instruments, incluindo conceitos técnicos e suas aplicações no desenvolvimento iOS."
        },
        {
          "id": 5,
          "type": "headline",
          "value": "Exemplo básico de uso"
        },
        {
          "id": 6,
          "type": "body",
          "value": "Veja a seguir um exemplo básico para entender rapidamente a aplicação prática:"
        },
        {
          "id": 7,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo básico\ndef example() {\n    print(\"Hello, \\(topic[0])!\")\n}"
        },
        {
          "id": 8,
          "type": "headline",
          "value": "Exemplo intermediário com cenário real"
        },
        {
          "id": 9,
          "type": "body",
          "value": "Agora um exemplo mais completo, simulando um caso real para maior entendimento."
        },
        {
          "id": 10,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo intermediário\nclass Manager {\n    func performTask() {\n        // Implementação detalhada\n    }\n}"
        },
        {
          "id": 11,
          "type": "headline",
          "value": "Melhores práticas"
        },
        {
          "id": 12,
          "type": "body",
          "value": "Ao usar Melhorando performance com Instruments, siga estas práticas:\n- Organização clara do código.\n- Aplicação de padrões de projeto.\n- Validação constante do desempenho."
        },
        {
          "id": 13,
          "type": "headline",
          "value": "Erros comuns e como evitá-los"
        },
        {
          "id": 14,
          "type": "body",
          "value": "Evite erros comuns como falta de tratamento de erros, negligência com performance e má gestão de memória."
        },
        {
          "id": 15,
          "type": "headline",
          "value": "Conclusão"
        },
        {
          "id": 16,
          "type": "body",
          "value": "Dominar Melhorando performance com Instruments elevará suas capacidades técnicas e melhorará significativamente a qualidade dos seus apps iOS."
        }
      ]
    },
    {
      "id": 42,
      "thumbnailUrl": "https://example.com/thumb42.png",
      "title": "Combine no iOS",
      "description": "Aprenda a gerenciar fluxos de dados reativos utilizando Combine, com exemplos práticos de assinaturas e publishers.",
      "createdAt": "2024-07-31",
      "isVisible": true,
      "content": [
        {
          "id": 1,
          "type": "headline",
          "value": "Introdução ao Combine no iOS"
        },
        {
          "id": 2,
          "type": "body",
          "value": "Combine no iOS é essencial para desenvolvedores iOS modernos. Neste artigo, você vai dominar os principais conceitos, aplicações práticas e técnicas avançadas."
        },
        {
          "id": 3,
          "type": "headline",
          "value": "Conceitos fundamentais de Combine no iOS"
        },
        {
          "id": 4,
          "type": "body",
          "value": "Entenda os fundamentos do Combine no iOS, incluindo conceitos técnicos e suas aplicações no desenvolvimento iOS."
        },
        {
          "id": 5,
          "type": "headline",
          "value": "Exemplo básico de uso"
        },
        {
          "id": 6,
          "type": "body",
          "value": "Veja a seguir um exemplo básico para entender rapidamente a aplicação prática:"
        },
        {
          "id": 7,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo básico\ndef example() {\n    print(\"Hello, \\(topic[0])!\")\n}"
        },
        {
          "id": 8,
          "type": "headline",
          "value": "Exemplo intermediário com cenário real"
        },
        {
          "id": 9,
          "type": "body",
          "value": "Agora um exemplo mais completo, simulando um caso real para maior entendimento."
        },
        {
          "id": 10,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo intermediário\nclass Manager {\n    func performTask() {\n        // Implementação detalhada\n    }\n}"
        },
        {
          "id": 11,
          "type": "headline",
          "value": "Melhores práticas"
        },
        {
          "id": 12,
          "type": "body",
          "value": "Ao usar Combine no iOS, siga estas práticas:\n- Organização clara do código.\n- Aplicação de padrões de projeto.\n- Validação constante do desempenho."
        },
        {
          "id": 13,
          "type": "headline",
          "value": "Erros comuns e como evitá-los"
        },
        {
          "id": 14,
          "type": "body",
          "value": "Evite erros comuns como falta de tratamento de erros, negligência com performance e má gestão de memória."
        },
        {
          "id": 15,
          "type": "headline",
          "value": "Conclusão"
        },
        {
          "id": 16,
          "type": "body",
          "value": "Dominar Combine no iOS elevará suas capacidades técnicas e melhorará significativamente a qualidade dos seus apps iOS."
        }
      ]
    },
    {
      "id": 43,
      "thumbnailUrl": "https://example.com/thumb43.png",
      "title": "Async/Await no Swift",
      "description": "Entenda como simplificar chamadas assíncronas usando async/await e melhorar a legibilidade do seu código Swift.",
      "createdAt": "2025-02-21",
      "isVisible": true,
      "content": [
        {
          "id": 1,
          "type": "headline",
          "value": "Introdução ao Async/Await no Swift"
        },
        {
          "id": 2,
          "type": "body",
          "value": "Async/Await no Swift é essencial para desenvolvedores iOS modernos. Neste artigo, você vai dominar os principais conceitos, aplicações práticas e técnicas avançadas."
        },
        {
          "id": 3,
          "type": "headline",
          "value": "Conceitos fundamentais de Async/Await no Swift"
        },
        {
          "id": 4,
          "type": "body",
          "value": "Entenda os fundamentos do Async/Await no Swift, incluindo conceitos técnicos e suas aplicações no desenvolvimento iOS."
        },
        {
          "id": 5,
          "type": "headline",
          "value": "Exemplo básico de uso"
        },
        {
          "id": 6,
          "type": "body",
          "value": "Veja a seguir um exemplo básico para entender rapidamente a aplicação prática:"
        },
        {
          "id": 7,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo básico\ndef example() {\n    print(\"Hello, \\(topic[0])!\")\n}"
        },
        {
          "id": 8,
          "type": "headline",
          "value": "Exemplo intermediário com cenário real"
        },
        {
          "id": 9,
          "type": "body",
          "value": "Agora um exemplo mais completo, simulando um caso real para maior entendimento."
        },
        {
          "id": 10,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo intermediário\nclass Manager {\n    func performTask() {\n        // Implementação detalhada\n    }\n}"
        },
        {
          "id": 11,
          "type": "headline",
          "value": "Melhores práticas"
        },
        {
          "id": 12,
          "type": "body",
          "value": "Ao usar Async/Await no Swift, siga estas práticas:\n- Organização clara do código.\n- Aplicação de padrões de projeto.\n- Validação constante do desempenho."
        },
        {
          "id": 13,
          "type": "headline",
          "value": "Erros comuns e como evitá-los"
        },
        {
          "id": 14,
          "type": "body",
          "value": "Evite erros comuns como falta de tratamento de erros, negligência com performance e má gestão de memória."
        },
        {
          "id": 15,
          "type": "headline",
          "value": "Conclusão"
        },
        {
          "id": 16,
          "type": "body",
          "value": "Dominar Async/Await no Swift elevará suas capacidades técnicas e melhorará significativamente a qualidade dos seus apps iOS."
        }
      ]
    },
    {
      "id": 44,
      "thumbnailUrl": "https://example.com/thumb44.png",
      "title": "Combine no iOS",
      "description": "Aprenda a gerenciar fluxos de dados reativos utilizando Combine, com exemplos práticos de assinaturas e publishers.",
      "createdAt": "2024-10-22",
      "isVisible": true,
      "content": [
        {
          "id": 1,
          "type": "headline",
          "value": "Introdução ao Combine no iOS"
        },
        {
          "id": 2,
          "type": "body",
          "value": "Combine no iOS é essencial para desenvolvedores iOS modernos. Neste artigo, você vai dominar os principais conceitos, aplicações práticas e técnicas avançadas."
        },
        {
          "id": 3,
          "type": "headline",
          "value": "Conceitos fundamentais de Combine no iOS"
        },
        {
          "id": 4,
          "type": "body",
          "value": "Entenda os fundamentos do Combine no iOS, incluindo conceitos técnicos e suas aplicações no desenvolvimento iOS."
        },
        {
          "id": 5,
          "type": "headline",
          "value": "Exemplo básico de uso"
        },
        {
          "id": 6,
          "type": "body",
          "value": "Veja a seguir um exemplo básico para entender rapidamente a aplicação prática:"
        },
        {
          "id": 7,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo básico\ndef example() {\n    print(\"Hello, \\(topic[0])!\")\n}"
        },
        {
          "id": 8,
          "type": "headline",
          "value": "Exemplo intermediário com cenário real"
        },
        {
          "id": 9,
          "type": "body",
          "value": "Agora um exemplo mais completo, simulando um caso real para maior entendimento."
        },
        {
          "id": 10,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo intermediário\nclass Manager {\n    func performTask() {\n        // Implementação detalhada\n    }\n}"
        },
        {
          "id": 11,
          "type": "headline",
          "value": "Melhores práticas"
        },
        {
          "id": 12,
          "type": "body",
          "value": "Ao usar Combine no iOS, siga estas práticas:\n- Organização clara do código.\n- Aplicação de padrões de projeto.\n- Validação constante do desempenho."
        },
        {
          "id": 13,
          "type": "headline",
          "value": "Erros comuns e como evitá-los"
        },
        {
          "id": 14,
          "type": "body",
          "value": "Evite erros comuns como falta de tratamento de erros, negligência com performance e má gestão de memória."
        },
        {
          "id": 15,
          "type": "headline",
          "value": "Conclusão"
        },
        {
          "id": 16,
          "type": "body",
          "value": "Dominar Combine no iOS elevará suas capacidades técnicas e melhorará significativamente a qualidade dos seus apps iOS."
        }
      ]
    },
    {
      "id": 45,
      "thumbnailUrl": "https://example.com/thumb45.png",
      "title": "Melhorando performance com Instruments",
      "description": "Como utilizar o Instruments para identificar gargalos e otimizar performance em seus apps iOS.",
      "createdAt": "2024-09-04",
      "isVisible": true,
      "content": [
        {
          "id": 1,
          "type": "headline",
          "value": "Introdução ao Melhorando performance com Instruments"
        },
        {
          "id": 2,
          "type": "body",
          "value": "Melhorando performance com Instruments é essencial para desenvolvedores iOS modernos. Neste artigo, você vai dominar os principais conceitos, aplicações práticas e técnicas avançadas."
        },
        {
          "id": 3,
          "type": "headline",
          "value": "Conceitos fundamentais de Melhorando performance com Instruments"
        },
        {
          "id": 4,
          "type": "body",
          "value": "Entenda os fundamentos do Melhorando performance com Instruments, incluindo conceitos técnicos e suas aplicações no desenvolvimento iOS."
        },
        {
          "id": 5,
          "type": "headline",
          "value": "Exemplo básico de uso"
        },
        {
          "id": 6,
          "type": "body",
          "value": "Veja a seguir um exemplo básico para entender rapidamente a aplicação prática:"
        },
        {
          "id": 7,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo básico\ndef example() {\n    print(\"Hello, \\(topic[0])!\")\n}"
        },
        {
          "id": 8,
          "type": "headline",
          "value": "Exemplo intermediário com cenário real"
        },
        {
          "id": 9,
          "type": "body",
          "value": "Agora um exemplo mais completo, simulando um caso real para maior entendimento."
        },
        {
          "id": 10,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo intermediário\nclass Manager {\n    func performTask() {\n        // Implementação detalhada\n    }\n}"
        },
        {
          "id": 11,
          "type": "headline",
          "value": "Melhores práticas"
        },
        {
          "id": 12,
          "type": "body",
          "value": "Ao usar Melhorando performance com Instruments, siga estas práticas:\n- Organização clara do código.\n- Aplicação de padrões de projeto.\n- Validação constante do desempenho."
        },
        {
          "id": 13,
          "type": "headline",
          "value": "Erros comuns e como evitá-los"
        },
        {
          "id": 14,
          "type": "body",
          "value": "Evite erros comuns como falta de tratamento de erros, negligência com performance e má gestão de memória."
        },
        {
          "id": 15,
          "type": "headline",
          "value": "Conclusão"
        },
        {
          "id": 16,
          "type": "body",
          "value": "Dominar Melhorando performance com Instruments elevará suas capacidades técnicas e melhorará significativamente a qualidade dos seus apps iOS."
        }
      ]
    },
    {
      "id": 46,
      "thumbnailUrl": "https://example.com/thumb46.png",
      "title": "Combine no iOS",
      "description": "Aprenda a gerenciar fluxos de dados reativos utilizando Combine, com exemplos práticos de assinaturas e publishers.",
      "createdAt": "2024-11-03",
      "isVisible": true,
      "content": [
        {
          "id": 1,
          "type": "headline",
          "value": "Introdução ao Combine no iOS"
        },
        {
          "id": 2,
          "type": "body",
          "value": "Combine no iOS é essencial para desenvolvedores iOS modernos. Neste artigo, você vai dominar os principais conceitos, aplicações práticas e técnicas avançadas."
        },
        {
          "id": 3,
          "type": "headline",
          "value": "Conceitos fundamentais de Combine no iOS"
        },
        {
          "id": 4,
          "type": "body",
          "value": "Entenda os fundamentos do Combine no iOS, incluindo conceitos técnicos e suas aplicações no desenvolvimento iOS."
        },
        {
          "id": 5,
          "type": "headline",
          "value": "Exemplo básico de uso"
        },
        {
          "id": 6,
          "type": "body",
          "value": "Veja a seguir um exemplo básico para entender rapidamente a aplicação prática:"
        },
        {
          "id": 7,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo básico\ndef example() {\n    print(\"Hello, \\(topic[0])!\")\n}"
        },
        {
          "id": 8,
          "type": "headline",
          "value": "Exemplo intermediário com cenário real"
        },
        {
          "id": 9,
          "type": "body",
          "value": "Agora um exemplo mais completo, simulando um caso real para maior entendimento."
        },
        {
          "id": 10,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo intermediário\nclass Manager {\n    func performTask() {\n        // Implementação detalhada\n    }\n}"
        },
        {
          "id": 11,
          "type": "headline",
          "value": "Melhores práticas"
        },
        {
          "id": 12,
          "type": "body",
          "value": "Ao usar Combine no iOS, siga estas práticas:\n- Organização clara do código.\n- Aplicação de padrões de projeto.\n- Validação constante do desempenho."
        },
        {
          "id": 13,
          "type": "headline",
          "value": "Erros comuns e como evitá-los"
        },
        {
          "id": 14,
          "type": "body",
          "value": "Evite erros comuns como falta de tratamento de erros, negligência com performance e má gestão de memória."
        },
        {
          "id": 15,
          "type": "headline",
          "value": "Conclusão"
        },
        {
          "id": 16,
          "type": "body",
          "value": "Dominar Combine no iOS elevará suas capacidades técnicas e melhorará significativamente a qualidade dos seus apps iOS."
        }
      ]
    },
    {
      "id": 47,
      "thumbnailUrl": "https://example.com/thumb47.png",
      "title": "Combine no iOS",
      "description": "Aprenda a gerenciar fluxos de dados reativos utilizando Combine, com exemplos práticos de assinaturas e publishers.",
      "createdAt": "2024-11-29",
      "isVisible": true,
      "content": [
        {
          "id": 1,
          "type": "headline",
          "value": "Introdução ao Combine no iOS"
        },
        {
          "id": 2,
          "type": "body",
          "value": "Combine no iOS é essencial para desenvolvedores iOS modernos. Neste artigo, você vai dominar os principais conceitos, aplicações práticas e técnicas avançadas."
        },
        {
          "id": 3,
          "type": "headline",
          "value": "Conceitos fundamentais de Combine no iOS"
        },
        {
          "id": 4,
          "type": "body",
          "value": "Entenda os fundamentos do Combine no iOS, incluindo conceitos técnicos e suas aplicações no desenvolvimento iOS."
        },
        {
          "id": 5,
          "type": "headline",
          "value": "Exemplo básico de uso"
        },
        {
          "id": 6,
          "type": "body",
          "value": "Veja a seguir um exemplo básico para entender rapidamente a aplicação prática:"
        },
        {
          "id": 7,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo básico\ndef example() {\n    print(\"Hello, \\(topic[0])!\")\n}"
        },
        {
          "id": 8,
          "type": "headline",
          "value": "Exemplo intermediário com cenário real"
        },
        {
          "id": 9,
          "type": "body",
          "value": "Agora um exemplo mais completo, simulando um caso real para maior entendimento."
        },
        {
          "id": 10,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo intermediário\nclass Manager {\n    func performTask() {\n        // Implementação detalhada\n    }\n}"
        },
        {
          "id": 11,
          "type": "headline",
          "value": "Melhores práticas"
        },
        {
          "id": 12,
          "type": "body",
          "value": "Ao usar Combine no iOS, siga estas práticas:\n- Organização clara do código.\n- Aplicação de padrões de projeto.\n- Validação constante do desempenho."
        },
        {
          "id": 13,
          "type": "headline",
          "value": "Erros comuns e como evitá-los"
        },
        {
          "id": 14,
          "type": "body",
          "value": "Evite erros comuns como falta de tratamento de erros, negligência com performance e má gestão de memória."
        },
        {
          "id": 15,
          "type": "headline",
          "value": "Conclusão"
        },
        {
          "id": 16,
          "type": "body",
          "value": "Dominar Combine no iOS elevará suas capacidades técnicas e melhorará significativamente a qualidade dos seus apps iOS."
        }
      ]
    },
    {
      "id": 48,
      "thumbnailUrl": "https://example.com/thumb48.png",
      "title": "Testes Unitários com XCTest",
      "description": "Boas práticas e exemplos para implementar testes unitários robustos com XCTest em seus projetos Swift.",
      "createdAt": "2024-10-21",
      "isVisible": true,
      "content": [
        {
          "id": 1,
          "type": "headline",
          "value": "Introdução ao Testes Unitários com XCTest"
        },
        {
          "id": 2,
          "type": "body",
          "value": "Testes Unitários com XCTest é essencial para desenvolvedores iOS modernos. Neste artigo, você vai dominar os principais conceitos, aplicações práticas e técnicas avançadas."
        },
        {
          "id": 3,
          "type": "headline",
          "value": "Conceitos fundamentais de Testes Unitários com XCTest"
        },
        {
          "id": 4,
          "type": "body",
          "value": "Entenda os fundamentos do Testes Unitários com XCTest, incluindo conceitos técnicos e suas aplicações no desenvolvimento iOS."
        },
        {
          "id": 5,
          "type": "headline",
          "value": "Exemplo básico de uso"
        },
        {
          "id": 6,
          "type": "body",
          "value": "Veja a seguir um exemplo básico para entender rapidamente a aplicação prática:"
        },
        {
          "id": 7,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo básico\ndef example() {\n    print(\"Hello, \\(topic[0])!\")\n}"
        },
        {
          "id": 8,
          "type": "headline",
          "value": "Exemplo intermediário com cenário real"
        },
        {
          "id": 9,
          "type": "body",
          "value": "Agora um exemplo mais completo, simulando um caso real para maior entendimento."
        },
        {
          "id": 10,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo intermediário\nclass Manager {\n    func performTask() {\n        // Implementação detalhada\n    }\n}"
        },
        {
          "id": 11,
          "type": "headline",
          "value": "Melhores práticas"
        },
        {
          "id": 12,
          "type": "body",
          "value": "Ao usar Testes Unitários com XCTest, siga estas práticas:\n- Organização clara do código.\n- Aplicação de padrões de projeto.\n- Validação constante do desempenho."
        },
        {
          "id": 13,
          "type": "headline",
          "value": "Erros comuns e como evitá-los"
        },
        {
          "id": 14,
          "type": "body",
          "value": "Evite erros comuns como falta de tratamento de erros, negligência com performance e má gestão de memória."
        },
        {
          "id": 15,
          "type": "headline",
          "value": "Conclusão"
        },
        {
          "id": 16,
          "type": "body",
          "value": "Dominar Testes Unitários com XCTest elevará suas capacidades técnicas e melhorará significativamente a qualidade dos seus apps iOS."
        }
      ]
    },
    {
      "id": 49,
      "thumbnailUrl": "https://example.com/thumb49.png",
      "title": "Async/Await no Swift",
      "description": "Entenda como simplificar chamadas assíncronas usando async/await e melhorar a legibilidade do seu código Swift.",
      "createdAt": "2025-02-06",
      "isVisible": true,
      "content": [
        {
          "id": 1,
          "type": "headline",
          "value": "Introdução ao Async/Await no Swift"
        },
        {
          "id": 2,
          "type": "body",
          "value": "Async/Await no Swift é essencial para desenvolvedores iOS modernos. Neste artigo, você vai dominar os principais conceitos, aplicações práticas e técnicas avançadas."
        },
        {
          "id": 3,
          "type": "headline",
          "value": "Conceitos fundamentais de Async/Await no Swift"
        },
        {
          "id": 4,
          "type": "body",
          "value": "Entenda os fundamentos do Async/Await no Swift, incluindo conceitos técnicos e suas aplicações no desenvolvimento iOS."
        },
        {
          "id": 5,
          "type": "headline",
          "value": "Exemplo básico de uso"
        },
        {
          "id": 6,
          "type": "body",
          "value": "Veja a seguir um exemplo básico para entender rapidamente a aplicação prática:"
        },
        {
          "id": 7,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo básico\ndef example() {\n    print(\"Hello, \\(topic[0])!\")\n}"
        },
        {
          "id": 8,
          "type": "headline",
          "value": "Exemplo intermediário com cenário real"
        },
        {
          "id": 9,
          "type": "body",
          "value": "Agora um exemplo mais completo, simulando um caso real para maior entendimento."
        },
        {
          "id": 10,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo intermediário\nclass Manager {\n    func performTask() {\n        // Implementação detalhada\n    }\n}"
        },
        {
          "id": 11,
          "type": "headline",
          "value": "Melhores práticas"
        },
        {
          "id": 12,
          "type": "body",
          "value": "Ao usar Async/Await no Swift, siga estas práticas:\n- Organização clara do código.\n- Aplicação de padrões de projeto.\n- Validação constante do desempenho."
        },
        {
          "id": 13,
          "type": "headline",
          "value": "Erros comuns e como evitá-los"
        },
        {
          "id": 14,
          "type": "body",
          "value": "Evite erros comuns como falta de tratamento de erros, negligência com performance e má gestão de memória."
        },
        {
          "id": 15,
          "type": "headline",
          "value": "Conclusão"
        },
        {
          "id": 16,
          "type": "body",
          "value": "Dominar Async/Await no Swift elevará suas capacidades técnicas e melhorará significativamente a qualidade dos seus apps iOS."
        }
      ]
    },
    {
      "id": 50,
      "thumbnailUrl": "https://example.com/thumb50.png",
      "title": "SwiftData para Persistência",
      "description": "Guia completo sobre SwiftData, a solução moderna para persistência em apps iOS, substituindo Core Data.",
      "createdAt": "2025-01-19",
      "isVisible": true,
      "content": [
        {
          "id": 1,
          "type": "headline",
          "value": "Introdução ao SwiftData para Persistência"
        },
        {
          "id": 2,
          "type": "body",
          "value": "SwiftData para Persistência é essencial para desenvolvedores iOS modernos. Neste artigo, você vai dominar os principais conceitos, aplicações práticas e técnicas avançadas."
        },
        {
          "id": 3,
          "type": "headline",
          "value": "Conceitos fundamentais de SwiftData para Persistência"
        },
        {
          "id": 4,
          "type": "body",
          "value": "Entenda os fundamentos do SwiftData para Persistência, incluindo conceitos técnicos e suas aplicações no desenvolvimento iOS."
        },
        {
          "id": 5,
          "type": "headline",
          "value": "Exemplo básico de uso"
        },
        {
          "id": 6,
          "type": "body",
          "value": "Veja a seguir um exemplo básico para entender rapidamente a aplicação prática:"
        },
        {
          "id": 7,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo básico\ndef example() {\n    print(\"Hello, \\(topic[0])!\")\n}"
        },
        {
          "id": 8,
          "type": "headline",
          "value": "Exemplo intermediário com cenário real"
        },
        {
          "id": 9,
          "type": "body",
          "value": "Agora um exemplo mais completo, simulando um caso real para maior entendimento."
        },
        {
          "id": 10,
          "type": "code",
          "lang": "swift",
          "code": "// Exemplo intermediário\nclass Manager {\n    func performTask() {\n        // Implementação detalhada\n    }\n}"
        },
        {
          "id": 11,
          "type": "headline",
          "value": "Melhores práticas"
        },
        {
          "id": 12,
          "type": "body",
          "value": "Ao usar SwiftData para Persistência, siga estas práticas:\n- Organização clara do código.\n- Aplicação de padrões de projeto.\n- Validação constante do desempenho."
        },
        {
          "id": 13,
          "type": "headline",
          "value": "Erros comuns e como evitá-los"
        },
        {
          "id": 14,
          "type": "body",
          "value": "Evite erros comuns como falta de tratamento de erros, negligência com performance e má gestão de memória."
        },
        {
          "id": 15,
          "type": "headline",
          "value": "Conclusão"
        },
        {
          "id": 16,
          "type": "body",
          "value": "Dominar SwiftData para Persistência elevará suas capacidades técnicas e melhorará significativamente a qualidade dos seus apps iOS."
        }
      ]
    }
  ]
}
